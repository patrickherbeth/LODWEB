<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- <!DOCTYPE html> -->



<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:p="http://primefaces.org/ui">

<head>

<meta http-equiv="content-type" content="text/html; charset=UTF8" />

<meta name="viewport" content="width=device-width, initial-scale=1"/>

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"/>

<title>The Linking Open Data + ICA Demo</title>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css"/>

<link rel="stylesheet" href="../dist/login/style.css"/>

<link href='http://fonts.googleapis.com/css?family=Titillium+Web:400,300,600' rel='stylesheet' type='text/css'/>

<script type="text/javascript" src="../dist/exampleUtil.js"/>

<script type="text/javascript" src="../dist/vis.js"/>

<script src="../dist/googleAnalytics.js" type=""/>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

<link type="text/css" rel="stylesheet" href="../dist/vis-network.min.css" />

<style type="text/css">




@import url(//netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css);



.skipped{
	
	background-color: #f2dede;
}

.recommendationEvaluatedClass{
	cursor:pointer;
	text-decoration:underline;
	color:blue;
	display:inline-block;
}

.seedEvaluation{
	cursor:pointer;
	text-decoration:underline;
	color:blue;
	display:inline-block;
}


.instruction{
font-family:arial,helvetica,sans-serif;
font-size: 1.4em;
}

.instruction-light{
font-family:arial,helvetica,sans-serif;
font-size: 1.2em;
}

.userProfileRest{
	vertical-align:middle;
}


/****** Galery *****/
div.gallery {
    border: 0px solid #ccc;
}

div.gallery:hover {
    border: 0px solid #CCFFCC;
}

div.gallery img {
    /****** width: 100%; height: auto; *****/
/*     width: 60%;
    height: 55%; */
    
    
	width: 230px;
    height: 290px;     
}

div.desc {
    padding: 15px;
    /* text-align: center; */
}

* {
    box-sizing: border-box;
}

.responsive {

    padding: 0 6px;
    float: left;
    /* width: 24.99999%; */
    width: 20%;
}

@media only screen and (max-width: 700px){
    .responsive {
        width: 49.99999%;
        margin: 6px 0;
    }
}

@media only screen and (max-width: 500px){
    .responsive {
        width: 100%;
    }
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
}

/****** Evalaution Radion Button *****/
.maxl{
  margin:25px ;

}
.inline{
  display: inline-block;
}
.inline + .inline{
  margin-left:10px;
}
.radio{
  color:#6B6B6B;
  font-size:15px;
  position:relative;
}
.radio span{
  position:relative;
   padding-left:20px;
}
.radio span:after{
  content:'';
  width:15px;
  height:15px;
  border:3px solid;
  position:absolute;
  left:0;
  top:1px;
  border-radius:100%;
  -ms-border-radius:100%;
  -moz-border-radius:100%;
  -webkit-border-radius:100%;
  box-sizing:border-box;
  -ms-box-sizing:border-box;
  -moz-box-sizing:border-box;
  -webkit-box-sizing:border-box;
}
.radio input[type="radio"]{
   cursor: pointer; 
  position:absolute;
  width:100%;
  height:100%;
  z-index: 1;
  opacity: 0;
  filter: alpha(opacity=0);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)"
}
.radio input[type="radio"]:checked + span{
  color:#0B8;  
}
.radio input[type="radio"]:checked + span:before{
    content:'';
  width:5px;
  height:5px;
  position:absolute;
  background:#0B8;
  left:5px;
  top:6px;
  border-radius:100%;
  -ms-border-radius:100%;
  -moz-border-radius:100%;
  -webkit-border-radius:100%;
}



/****** Message http://fiddle.jshell.net/sunnypmody/XDaEk *****/ 
.alert-box {
	padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;  
}

.success {
    color: #3c763d;
    background-color: #dff0d8;
    border-color: #d6e9c6;
    text-align: center;
 }
 
.failure {
    color: #a94442;
    background-color: #f2dede;
    border-color: #ebccd1;

}

.warning {
    color: #8a6d3b;
    background-color: #fcf8e3;
    border-color: #faebcc;
}

.warningMessage {
    color: #8a6d3b;
    background-color: #fcf8e3;
    border-color: #faebcc;
	font-family:arial,helvetica,sans-serif;
	font-size: 1.2em;
	margin-top: 10px;    
} 

/****** Style Star Rating Widget *****/

div.stars {
    border-radius: 10px;
    background-color: #f2f2f2;
    padding: 20px;
    display: none;
}

div.stars {
  width: 270px
  display: inline-block;
}

input.star { display: none; align: center; }

label.star {
  float: right;
  padding: 10px;
  font-size: 36px;
  color: #444;
  transition: all .2s;
  
}

input.star:checked ~ label.star:before {
  content: '\f005';
  color: #FD4;
  transition: all .25s;
  
}

input.star-5:checked ~ label.star:before {
  color: #FE7;
  text-shadow: 0 0 20px #952;
}

input.star-1:checked ~ label.star:before { color: #F62; }

label.star:hover { transform: rotate(-15deg) scale(1.3); }

label.star:before {
  content: '\f006';
  font-family: FontAwesome;
}

input.datatext {
        BORDER-TOP: #000000 1px solid; 
        BORDER-LEFT: #000000 1px solid; 
        COLOR: #000000; 
        BORDER-BOTTOM: #000000 1px solid;
        height:18px;
    position:relative;
    left:3px;
    }
    select.contentselect {
        position:absolute;
        BORDER-TOP: #000000 1px solid; 
        height:20px;
        COLOR: #000000; 
        BORDER-BOTTOM: #000000 1px solid;

        border-left:none;
    }

input[type=range],
	::-moz-range-track,
	 ::-ms-track {
	 -webkit-appearance: none;
	 background-color: 3f91e5;
	 width: 250px;
	 height:20px;
::-webkit-slider-thumb,
	::-moz-range-thumb,
	 ::-ms-thumb {
	-webkit-appearance: none;
	background-color: #666;
	width: 10px;
	height: 20px;
}	 
	 
}

.ui-messages.ui-widget {
    display: inline-block;
}

#mynetwork {
/* 	width: 3500px;
	height: 1500px; */
 	width: 1400px;
	height: 1000px;
	border: 3px solid lightgray;
}

#nodeContent li{
	display: inline;
	padding-right: 20px;
	list-style-type: none;
}

div.nodeContent {
	position: relative;
	border: 1px solid lightgray;
	width: 480px;
	height: 780px;
	margin-top: -802px;
	margin-left: 810px;
	padding: 10px;
}

pre {
	padding: 5px;
	margin: 5px;
}

.string {
	color: green;
}

.number {
	color: darkorange;
}

.boolean {
	color: blue;
}

.null {
	color: magenta;
}

.key {
	color: red;
}
   
.loaderStop {
    vertical-align:middle;
	width: 0px;
	height: 0px;
}
   
.loaderMov {
  vertical-align:middle;
  border: 16px solid #f3f3f3;
  border-radius: 80%;
  border-top: 16px solid #3498db;
  width: 50px;
  height: 50px;
  -webkit-animation: spin 1s linear infinite;
  animation: spin 1s linear infinite;
  
}    
   
.loaderMov:after {  content: "              "  }

@-webkit-keyframes spin {
  0% { -webkit-transform: rotate(0deg);   }
  100% { -webkit-transform: rotate(360deg);  }
}

@keyframes spin {
  0% { transform: rotate(0deg);  }
  100% { transform: rotate(360deg);  }
}
      
.message {
    display:none;
    -webkit-animation: fadeOut 6s forwards;
    animation: fadeOut 8s forwards;
    -webkit-animation-delay: 8s;
    animation-delay: 8s;
    background: #019ad2;
    color: white;
    padding: 10px;
    text-align: center;
    width: 100%;
}

@-webkit-keyframes fadeOut {
    from {opacity: 2;}
    to {opacity: 0;}
}

@keyframes fadeOut {
    from {opacity: 2;}
    to {opacity: 0;}
}  
 
 
/* The Modal (background) &amp;&amp; and */
.modalReview {
    display: none; /* Hidden by default */ 
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 360px;
    left: 0;
    bottom: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
} 
    
/* The Modal (background) &amp;&amp; and */
.modal {
    display: none; /* Hidden by default */ 
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 10px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
    position: relative;
    /* overflow: scroll; */
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: 85.25%;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 5px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.2s;
    animation-name: animatetop;
    animation-duration: 0.2s
    
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-100px; opacity:0} 
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-100px; opacity:0}
    to {top:0; opacity:1}
}

/* The Close Button */
.close {
    color: white;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}


.modal-header {
    padding: 2px 8px;
    background-color: #A5C8FD;
    color: white;
}

.modal-body {padding: 2px 8px;}

.modal-footer {
    padding: 2px 8px;
    background-color: #A5C8FD;
        color: white;
}  

.myButtonInstruction {
	-moz-box-shadow: 0px 1px 0px 0px #f0f7fa;
	-webkit-box-shadow: 0px 1px 0px 0px #f0f7fa;
	box-shadow: 0px 1px 0px 0px #f0f7fa;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #33bdef), color-stop(1, #019ad2));
	background:-moz-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-webkit-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-o-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-ms-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:linear-gradient(to bottom, #33bdef 5%, #019ad2 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#33bdef', endColorstr='#019ad2',GradientType=0);
	background-color:#33bdef;
	-moz-border-radius:8px;
	-webkit-border-radius:8px;
	border-radius:8px;
	border:1px solid #057fd0;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:5px 5px;
	text-decoration:none;
	text-shadow:0px -1px 0px #5b6178;
}

.myButtonInstruction {
	-moz-box-shadow: 0px 1px 0px 0px #f0f7fa;
	-webkit-box-shadow: 0px 1px 0px 0px #f0f7fa;
	box-shadow: 0px 1px 0px 0px #f0f7fa;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #33bdef), color-stop(1, #019ad2));
	background:-moz-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-webkit-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-o-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-ms-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:linear-gradient(to bottom, #33bdef 5%, #019ad2 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#33bdef', endColorstr='#019ad2',GradientType=0);
	background-color:#33bdef;
	-moz-border-radius:8px;
	-webkit-border-radius:8px;
	border-radius:8px;
	border:1px solid #057fd0;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:5px 5px;
	text-decoration:none;
	text-shadow:0px -1px 0px #5b6178;
}

.myButton {
	-moz-box-shadow: 0px 1px 0px 0px #f0f7fa;
	-webkit-box-shadow: 0px 1px 0px 0px #f0f7fa;
	box-shadow: 0px 1px 0px 0px #f0f7fa;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #33bdef), color-stop(1, #019ad2));
	background:-moz-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-webkit-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-o-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:-ms-linear-gradient(top, #33bdef 5%, #019ad2 100%);
	background:linear-gradient(to bottom, #33bdef 5%, #019ad2 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#33bdef', endColorstr='#019ad2',GradientType=0);
	background-color:#33bdef;
	-moz-border-radius:8px;
	-webkit-border-radius:8px;
	border-radius:8px;
	border:1px solid #057fd0;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:14px;
	font-weight:bold;
	padding:2px 5px;
	text-decoration:none;
	text-shadow:0px -1px 0px #5b6178;
}
.myButton:hover {
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #019ad2), color-stop(1, #33bdef));
	background:-moz-linear-gradient(top, #019ad2 5%, #33bdef 100%);
	background:-webkit-linear-gradient(top, #019ad2 5%, #33bdef 100%);
	background:-o-linear-gradient(top, #019ad2 5%, #33bdef 100%);
	background:-ms-linear-gradient(top, #019ad2 5%, #33bdef 100%);
	background:linear-gradient(to bottom, #019ad2 5%, #33bdef 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#019ad2', endColorstr='#33bdef',GradientType=0);
	background-color:#019ad2;
}
.myButton:active {
	position:relative;
	top:1px;
}


.table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
 	width: 73.5%;
}

td, th {
    text-align: left;
    padding: 8px;
    
}

tr:nth-child(even) {
    background-color: #CCE5FF;
}


.rec {
  display: inline-block;
  height: 30px;
  background: #CCF2FF;
  padding-left: 7px; /*sets 'padding'*/
  padding-right: 7px; /*sets 'padding'*/
  line-height: 20px; /*for this, it sets vertical alignment*/
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif;
}

.recEval {
  display: inline-block;
  height: 30px;
  background: #ffd8b7;
  padding-left: 7px; /*sets 'padding'*/
  padding-right: 7px; /*sets 'padding'*/
  line-height: 20px; /*for this, it sets vertical alignment*/
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif;
}

.seed {
  display: inline-block;
  height: 30px;
  background: #CCFFCC; /*sets the background of this element (here a solid colour)*/
  padding-left: 15px; /*sets 'padding'*/
  padding-right: 15px; /*sets 'padding'*/
  line-height: 20px; /*for this, it sets vertical alignment*/
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif;
}

.title {
/*   display: inline-block;
  height: 30px;
  background: #cfd6d3;
  padding-left: 15px; 
  padding-right: 15px; 
  line-height: 20px; 
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif; */
  
 
  background: black;
  color: #fff; 
  font-family:arial,helvetica,sans-serif;
  font-size: 36px; 
  font-weight: normal;
  line-height: 60px; margin: 10px 0 20px; 
   text-transform: uppercase; 
   text-shadow: 2px 2px 0 #000, margin: 10px 0 24px; 
   text-align: center;   
   display:inline-block; 
}

.titleRec {
/*   display: inline-block;
  height: 30px;
  background: #cfd6d3;
  padding-left: 15px; 
  padding-right: 15px; 
  line-height: 20px; 
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif; */
  
 background-color:#33bdef;
	-moz-border-radius:8px;
	-webkit-border-radius:8px;
	border-radius:8px;
	border:1px solid #057fd0;
	color:#ffffff;
  font-family:arial,helvetica,sans-serif;
  font-size: 25px; 
  font-weight: normal;
  line-height: 40px; margin: 10px 0 20px; 
   text-transform: uppercase; 
   text-shadow: 2px 2px 0 #000, margin: 10px 0 24px; 
    
}

.profile {
  display: inline-block;
  height: 30px;
  background: #9999FF; /*sets the background of this element (here a solid colour)*/
  padding-left: 15px; /*sets 'padding'*/
  padding-right: 15px; /*sets 'padding'*/
  line-height: 20px; /*for this, it sets vertical alignment*/
  font-weight: bold;
  text-align: center;
  font-family: "Times New Roman", Times, serif;
}
   
</style>

</head>

<body onload="enableLogin(true);validateSimilarityMethod();showButtons(false);enableFilters();profile();isValidURL(host);isValidTSS(tss); ">

<div id="loginform" class="form">
      <!-- <div id="serverLoginID" onclick="showHideRow('hostRow');">(server)</div> -->
      <ul class="tab-group">
        <li class="tab active"><a href="#login">Log In</a></li>
        <li class="tab "><a href="#signup" onclick="populateCountries('country');">Sign Up</a></li>
      </ul>
      
      <div class="tab-content">
        <div id="login">   
          <h1></h1><div id="messageInit"/><br/>

            <div class="field-wrap">
            <label class="labellogin">Email Address<span class="req">*</span></label>
            <input class="inputlogin" value="freddurao@gmail.com" type="email" id="emaillogin"  required="required" autocomplete="off"/>
            <!-- <input class="inputlogin" value="test@gmail.com" type="email" id="emaillogin"  required="required" autocomplete="off"/> -->
          </div>
          
          <div class="field-wrap">
            <label class="labellogin">Password<span class="req">*</span></label>
            <input class="inputlogin" value="fred" type="password"  id="passwordlogin"  required="required" autocomplete="off"/>
            <!-- <input class="inputlogin" value="test" type="password"  id="passwordlogin"  required="required" autocomplete="off"/> -->
          </div>
          
          <p class="forgot"><a href="#" onclick="javascript:alert('Please contact the system admin.')">Forgot Password?</a></p>

          <button onclick="login();"  class="button button-block">Log In</button>
        </div>
        <div id="signup">   
          <h1></h1><div id="messageInitRegister"/><br/>
          <div class="top-row">
            <div class="field-wrap">
              <label class="labellogin">First Name<span class="req">*</span></label>
              <input class="inputlogin"  type="text" required="required" id="first" name="first"  autocomplete="off" />
            </div>
        
            <div class="field-wrap">
              <label class="labellogin">Last Name<span class="req">*</span></label>
              <input class="inputlogin"  type="text" id="second"  name="second"  required="required" autocomplete="off"/>
             </div>
             
           </div>
            
            
			<div align="left" class="field-wrap"><label  class="labellogin">Optional:</label></div>
				   
			<div class="field-wrap">
			<select id="sex" style='background: rgba(19, 35, 47, 0.9);color: #fff;font-size: 18px;'>
				<option value="0" disabled="disabled" selected="selected">Sex</option>
	  			<option value="male">Male</option>
	  			<option value="female">Female</option>
			</select> 
			
			<select id="agerange" style='background: rgba(19, 35, 47, 0.9);color: #fff;font-size: 18px;'>
				<option value="0" disabled="disabled" selected="selected">Age Range</option>
	  			<option value="1625">16 - 25</option>
				<option value="2635">26 - 35</option>
	  			<option value="3645">36 - 45</option>
	  			<option value="4655">46 - 55</option>
	  			<option value="55more">more...</option>
			</select>
			

			
			<div align="left" class="field-wrap"><label class="labellogin">Where are you from?:</label><span class="req">*</span>		</div>
			<select id="country"  style='background: rgba(19, 35, 47, 0.9);color: #fff;font-size: 18px;' name="country"></select>
					
		</div>

	        
          <div class="field-wrap">
            <label class="labellogin">Email Address<span class="req">*</span></label>
            <input class="inputlogin"  type="email"   id="email"  name="email"   required="required" autocomplete="off"/>
          </div>          

          <div class="field-wrap">
            <label class="labellogin">Set A Password<span class="req">*</span></label>
            <input class="inputlogin"  type="password" id="password"  name="password" required="required" autocomplete="off"/>
          </div>
          <button class="button button-block" onclick="register()" >Register</button>
        </div>


        
      </div><!-- tab-content -->
      
</div> <!-- /form -->

     <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

    <script src="../dist/login/login.js"></script>


<!-- 

<div id="elicitation"  class="responsive">
  <table>
      <tr>
          <td>Emimnen</td>
          <td> <img  src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Eminem_DJ_Hero.jpg/300px-Eminem_DJ_Hero.jpg" width="200" height="300" alt="Mountain View"/>
          </td>
      </tr>
</table>
</div>	


<div class="responsive">
  <div class="gallery">
  <table><tr><td>
    <a target="_blank" href="img_fjords.jpg">
      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Eminem_DJ_Hero.jpg/300px-Eminem_DJ_Hero.jpg" alt="Trolltunga Norway" width="300" height="200"/>
    </a>
    <div class="desc">Add a description of the image here</div>
    </td></tr>
    </table>
  </div>
</div> -->




<div class="clearfix"></div>


<div id="control" style='display:none'>
  <table id="controlTable" >
<!--         <tr>
        <td></td><td><button class="titleRec">LINKED OPEN DATA BROWSER</button></td>
      </tr> -->
      <tr id="evalHeaderInstructions" >
          <td><button onclick="document.getElementById('id01').style.display='block'" class="myButtonInstruction">Experiment Instructions</button></td>
          <td><button class="title">LINKED OPEN DATA BROWSER EXPERIMENT</button></td>
          
      </tr>

	<tr id="hostRow" style="display:none" >
		<td>Host:</td>
		<td>
		<select id="host" onchange="isValidURL(host)">
  			<option value="http://143.239.81.213:8080" >http://143.239.81.213:8080</option>
  			<option value="http://localhost:8080" selected="selected">http://localhost:8080</option>
  			<option value="http://10.243.108.81:8080">http://10.243.108.81:8080</option>
		</select>
		<label for="tss">Triple Store Server:</label>
		<select id="tss" onchange="isValidTSS(tss);">
  			<option value="DBPEDIA" selected="selected">DBPEDIA</option>
  			<option value="FUSEKI" >FUSEKI</option>
		</select>		
		</td>
	</tr>
      <tr>
          <td class="instruction-light">User Account</td>
          <td><label onclick="showHideRow('controllers');showHideRow('hostRow');" ><b>Name:</b></label>&nbsp;<label class="instruction-light"  for="username" id="username"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="instruction-light"  for="userid"><b>ID:</b>&nbsp;</label><input id="userid" type="text" value="208857" onchange="profile();"/>
          <button id="signout" onclick="signout();" class="myButton">Sign out</button>
          <button id="settingsBtn" onclick="showHideRow('controllers');showHideRow('hostRow');" class="myButton">Settings</button>
          </td>
      </tr>
      <tr>
          <td><label for="uri" class="instruction-light">Recommend for</label></td>
          <!-- <td><input id="uri" class="instruction-light" type="text" value="Finding_Nemo" name="uri" onchange="checkResource();updateUri();"/> -->
          <td><input id="uri" class="instruction-light" type="text" name="uri" onchange="checkResource();updateUri();"/>
             <button id="recommend" onclick="recommend();" class="myButton">Recommend</button>
              <button id="btnClearNodes" onclick="resetAll()" class="myButton">Clear Nodes</button>
              <button id="btnFreezeNodes" onclick="freeze(this)" value="Freeze" title="Freeze Nodes"  class="myButton">Freeze Nodes</button>             
			<select id="thelist" name="thelist"  onchange="combo(this,'uri');updateUri();"  title="Query Samples"> 
			  <option value="Query Samples:" title="Query Samples:">Query Samples:</option>
			  <option>Finding_Nemo</option>
			  <option>Finding_Dory</option>
			  <option>University_College_Cork</option>
			  <option>Hawaii</option>
			</select>
			<button id="infoboxQuery" onclick="updateUri();showInfobox();" class="myButton">Infobox</button> <div id="error-message"/>
          </td>
      </tr>       
      <tr>
          <td><label class="instruction-light" for="nodeContent"><a onclick="editProfile()" href="javascript:void(0);">User Profile</a></label>&nbsp;(<label id="profilesize"  class="instruction-light"/>)</td>
          <td><label id="nodeContent"/></td>
      </tr> 
      
	  <tr id="preferenceElicitationRow">
		  <td><label class="instruction-light"  for="preferenceElicitation"><a onclick="editProfile()" href="javascript:void(0);">Preference Elicitation</a></label></td>	          
          <td><label  class="instruction-light">List 100</label> <button id="loadItems" onclick="loadItems('BOOK')"  class="myButton">Book</button>
              <button id="loadItems" onclick="loadItems('MOVIE')"  class="myButton">Movie</button>
              <button id="loadItems" onclick="loadItems('MUSIC')"  class="myButton">Music</button>
              or <label  class="instruction-light">Search:</label><input id="searchItem"   onkeyup="searchItemsKey();"  type="text" class="instruction-light"/><button id="searchButton" onclick="searchItems();" class="myButton">Search</button>
              <button id="clearItemsButton" onclick="clearItems();" class="myButton">Clear</button>
              <button id="closeItemsButton" onclick="editProfile()" class="myButton">Close</button>
           </td> 
      </tr> 
      
      <tr id="itemListRow">
          <td><label for="itemList">Item list</label></td>
          <td id="itemListResult"><label id="itemListMessage"/></td>
      </tr> 
      
 	 <tr id="evaluationRow" style="display:none">
   		  <td><label class="instruction-light" for="evaluationLogMessageRow">Evaluation Message</label></td>
		  <td><div id="evaluationLogMessage"/></td>
      </tr>
      
	 <tr id="evaluationLogTableRow" style="display:none">
		  <td><label class="instruction-light"  for="evaluationProgress">Evaluation Progress</label></td>   		  
          <td><div id="evaluationLogTable"/></td>
      </tr>    
      <tr id="scoreFilterRow">
          <td><label class="instruction-light"  for="scorefilter">Score Filter(-1,1)</label></td>
          <td><input id="scorefilter" type="text" value="-1"/></td>
          
      </tr>
      <tr id="topnFilterRow">
          <td><label class="instruction-light"   for="topN">TOP@N</label></td>
          <td><input id="topN" type="text" value="100"/></td><td bgcolor="white" colspan="3"></td>
      </tr>      
      <tr id="maxNodeRow">
          <td><label class="instruction-light"   for="maxNode">Max Candidates</label></td>
          <td><input id="maxNode" type="text" value="20"/></td><td bgcolor="white" colspan="3"></td>
      </tr>
	 <tr id="hibridRow">
          <td><label class="instruction-light"  for="fader">Hybrid Rate</label></td> 
          <td><input type="range" min="0" max="100" value="0" id="fader" step="1" oninput="outputUpdate(value);"/>
          <output for="fader" id="volume">0</output><label>%</label>
		  <img id="hybridLabel" onclick="fire('This input means that up to x% of the candidate size will be filled with content-based recommendations.');" src="../dist/img/why.png" alt="This input means that up to x% of the candidate size will be filled with content-based recommendations."  width="25" height="25"/>
   		  <hr width="1" size="500"/><label for="maxhybrid">Max Hybrid Nodes:&nbsp;</label><input id="maxhybrid" type="text" value="3"/>          
          </td>
	 </tr> 
      <tr id="controllers" style="display:none">
          <td><label class="instruction-light">Controllers</label></td>
          <td>
              <label><input type="checkbox" id="removeCategory"  checked="checked"/> Remove categories</label>
              <label><input type="checkbox" id="showTU" style='visibility:false'/>Show TU</label>
                <label><input type="radio" id="useICA"  name="similarityMethod" onchange="evaluationLog()" checked="checked" value="LDSD_LOD" />ICA</label>
		        <!-- <label><input type="radio" id="useCB" name="similarityMethod" onchange="evaluationLog()" value="ABSTRACT_SIMILARITY"/>CBSIM</label> -->
		        <label><input type="radio" id="useCB" name="similarityMethod" onchange="evaluationLog()" value="LDSD"/>LDSD</label>
		        
<!--               <label><input type="checkbox" id="useICA" onchange="evaluationLog()" />ICA</label>
              <label><input type="checkbox" id="useCB" onchange="evaluationLog()" checked="checked" />CBSIM</label> -->
              <label><input type="checkbox" id="showAll"/>Show all connections</label>
              <label><input type="checkbox" id="showInfoboxOnClick" checked="checked" />Enable Infobox</label>
              <label><input type="checkbox" id="underEvaluation" onchange="enableEvaluation();"  checked="checked"/>Enable Evaluation</label>
              <label><input type="checkbox" onchange="enableFilters();" id="filters"/>Filters</label>
              <label><input type="checkbox" onchange="enableCache();" id="enablecache" checked="checked"/>Cache</label>
			  <button id="btnClearCache" onclick="clearCache()" class="myButton">Clear Cache</button>              
        </td>
      </tr>
      
      <tr id="loaderRow" style="display:none">
      	<td><label class="instruction-light">Status:</label></td>
      	<td style="display:inline;"><div id="loader" class="loaderStop"/><label style="display:inline;position: relative;left:5%;">Recommendations on the way...</label></td>
	</tr>      	
	</table>
</div>	
	
<div id="message" class="message" />


<div id="id01" class="w3-modal w3-animate-opacity">
  <div class="w3-modal-content">

    <header class="w3-container w3-teal"> 
      <span onclick="document.getElementById('id01').style.display='none'" 
      class="w3-button w3-display-topright">&times;</span>
      <h2>Instructions for Online Evaluation</h2>
      
    </header>
    
    

    <div class="w3-container">
	<table>	
	
	<tbody id="generalIntruction" >
	    <tr bgcolor="black">
          <td><label for="tb1" style="color:white">General Steps</label>&nbsp;&nbsp;<a target="blank" href="https://www.youtube.com/embed/KTw8mcdHSPM">(Video Demo)</a></td>
       
        </tr>
		<tr bgcolor="white" >
		  <td bgcolor="#f2f2f2" >
			<ol>
			  <li><a onclick="showHide('profileIntructions');" href="#"><u><label class="instruction">Create your profile (items that you like or have an interest in).</label></u></a></li>
			  <li><a onclick="showHide('recomendationInstructions');" href="#"><u><label class="instruction">Select one item from your profile as a seed and click on the <button disabled="disabled" class="myButton" onclick="#">Recommend</button> button.</label></u></a><br/><label class="instruction-light">Three recommendations (in light blue) will be shown. They will be linked to the seed (in light green). (Please be patient: it might take a short while before the recommendations appear.)</label></li>
			  <li><a onclick="showHide('evaluationIntructions');" href="#"><u><label class="instruction">Click on each generated recommendation and answer its respective evaluation form.</label></u></a></li>
			  <li><label class="instruction-light">Repeat steps 3 and 4 until the a total of 9 recommendations from 3 distinct seeds are evaluated.</label></li>
			</ol>
		  </td>
		</tr>
		</tbody>
			
	<tbody id="profileIntructions" style="display:none">
	    <tr bgcolor="black">
          <td><label for="tb1" style="color:white">1. Create your profile.</label><span  style="cursor:pointer;color:white;position:absolute;right:200px;" onclick="showHide('profileIntructions');">(close)</span></td>
          
        </tr>
		<tr bgcolor="white" >
		  <td bgcolor="#f2f2f2">
			<ol>
			  <li><label class="instruction-light">Click on the label <a id="#" href="#" onclick="#">User Profile</a> on the left of your screen.</label></li>
			  <li><label class="instruction-light">Search for a movie, book or a music. You can also view a list of 100 random item.</label></li>
			  <li><label class="instruction-light">To add an item of interest to your profile, simply click on it. It will be added to your profile and shown in green.</label></li>
			  <li><label class="instruction-light">Liked items can be removed from your profile by clicking on the (x) icon.</label></li>
			</ol>
		  </td>
		</tr>
		
		</tbody>
			
	<tbody id="recomendationInstructions" style="display:none">		
		
	    <tr bgcolor="black">
          <td><label for="tb1"   style="color:white">2. Run Recommendations</label><span  style="cursor:pointer;color:white;position:absolute;right:200px;" onclick="showHide('recomendationInstructions');">(close)</span></td>
        </tr>
		<tr bgcolor="white" >
		  <td bgcolor="#f2f2f2">
			<ol>
			  <li><label class="instruction-light">Select one item from your profile as a seed for recommendations by clicking on it.</label></li>
			  <li><label class="instruction-light">Click on the <button disabled="disabled" class="myButton">Recommend</button> button.</label></li>
			  <li><label class="instruction-light">Three (3) recommendations (in light blue) will be shown. They will be linked to the seed (in light green).</label></li>
			  <li><label class="instruction-light">When recommendations cannot be generated, the following message will be shown: <span class="skipped">No recommendation</span></label>.</li>			  
			</ol>
		  </td>
		</tr>	
		
		</tbody>
			
	<tbody id="evaluationIntructions"  style="display:none" >		
		
		<tr bgcolor="black">
          <td><label for="tb1"   style="color:white">3. Evaluate Recommendations</label><span  style="cursor:pointer;color:white;position:absolute;right:200px;" onclick="showHide('evaluationIntructions');">(close)</span></td>
        </tr>
		<tr bgcolor="white">
		  <td bgcolor="#f2f2f2">
			<ol>
			  <li><label class="instruction-light">Click on each recommendation (in light blue) in turn. An <b>Infobox</b> also containing an Evaluation Form will be displayed.</label></li>
			  <li><label class="instruction-light">Read the descriptive information provided in the <b>Infobox</b> and click on the (+) icon (or title) for more info if needed.</label></li>
			  <li><label class="instruction-light">Scroll down the <b>Infobox</b> and answer the evaluation questions in the <b>Evaluation Form</b>.</label></li>
			  <li><label class="instruction-light">Click on the <button disabled="disabled" class="myButton" onclick="#">Submit</button> button to register your answers. A confirmation message will be displayed.</label></li>
			</ol>
		  </td>
		</tr>
		</tbody>	
		</table >
    </div>
    <footer class="w3-container w3-teal">
      <p>LODICA 2017</p>
    </footer>

  </div>
</div>


<!-- The Modal -->
<div id="myModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="close" ><label onclick="showHide('mynetworkClear');">&times;</label></span>
      <div id="modalTitle"/>
    </div>
    <div id="modalBox" class="modal-body"/>
    <div id="modal-footer" class="modal-footer">
      <h4 id="footText" >LODICA 2017</h4>
    </div>
    
	<div id="modalEvaluation" class="stars" >
		<table >
				
				<!-- <tbody id="tb1" style="display:block;border: 2px solid black;width: 130%;border-collapse: separate;border-spacing: 4px;" > -->
				<tbody id="tb1"  style='display:none'>
				   <tr bgcolor="black">
			          <td colspan="2"><label for="tb1"   style="color:white" >Accuracy</label></td>
			       </tr>	
			      <tr>
			          <td bgcolor="#c9c9e5"><label for="accuracy">How accurate is this recommendation based on your profile?</label></td>
			         <td bgcolor="#e8e8e8"> 
			         <div class="maxl">
								<label class="radio inline"><input  id="accuracy" name="accuracy" type="radio"  value="1"/><span>Not at all</span></label>
								<label class="radio inline"><input id="accuracy" name="accuracy" type="radio"  value="2"/><span>A little</span></label>
								<label class="radio inline"><input id="accuracy"  name="accuracy" type="radio"  value="3"/><span>Neutral</span></label>
								<label class="radio inline"><input id="accuracy" name="accuracy" type="radio"  value="4"/><span>Much</span></label>
								<label class="radio inline"><input id="accuracy" name="accuracy" type="radio"  value="5"/><span>Very much</span></label>
					</div> 
			      	</td>
			      </tr>	
				</tbody> 
				
				<tbody id="tb4">
					<tr bgcolor="black">
						<td  colspan="2"><label for="tb4" style="color:white">Satisfaction</label></td>
					</tr>

					<tr>
						<td bgcolor="#c9c9e5"><label for="satisfaction">How much do you like this recommendation?</label></td>
			         <td bgcolor="#e8e8e8"> 
			         <div class="maxl">
								<label class="radio inline"><input type="radio" id="satisfaction" name="satisfaction" value="1"/><span>Not at all</span></label>
								<label class="radio inline"><input type="radio" id="satisfaction" name="satisfaction" value="2"/><span>A little</span></label>
								<label class="radio inline"><input type="radio" id="satisfaction" name="satisfaction" value="3"/><span>Neutral</span></label>
								<label  class="radio inline"><input type="radio" id="satisfaction" name="satisfaction" value="4"/><span>Much</span></label>
								<label  class="radio inline"><input type="radio" id="satisfaction" name="satisfaction" value="5"/><span>Very much</span></label>
					</div> 
			      	</td>
					</tr>
				</tbody>				    
			      
				<tbody id="tb2" >
					<tr bgcolor="black">
						<td colspan="2"><label for="tb2" style="color:white">Understand Me</label></td>
					</tr>
					<tr>
						<td bgcolor="#c9c9e5"><label for="understand">How well does the recommendation reflect your preferences?</label></td>
			         <td bgcolor="#e8e8e8"> 
			         <div class="maxl">
								<label class="radio inline"><input type="radio" id="understand" name="understand" value="1"/><span>Not at all</span></label>
								<label class="radio inline"><input type="radio" id="understand" name="understand" value="2"/><span>A little</span></label>
								<label class="radio inline"><input type="radio" id="understand" name="understand" value="3"/><span>Neutral</span></label>
								<label  class="radio inline"><input type="radio" id="understand" name="understand" value="4"/><span>Much</span></label>
								<label  class="radio inline"><input type="radio" id="understand" name="understand" value="5"/><span>Very much</span></label>
					</div> 
			      	</td>
					</tr>
				</tbody>
				 <tbody id="tb3" >
					<tr bgcolor="black">
						<td colspan="2"><label for="tb3" style="color:white">Novelty</label></td>
					</tr>
					<tr>
						<td bgcolor="#c9c9e5"><label for="novelty">How familiar are you with the object that is being recommended?</label></td>
			         <td bgcolor="#e8e8e8"> 
			         <div class="maxl">
								<label class="radio inline"><input type="radio" id="novelty" name="novelty" value="1"/><span>Not at all</span></label>
								<label class="radio inline"><input type="radio" id="novelty" name="novelty" value="2"/><span>A little</span></label>
								<label class="radio inline"><input type="radio" id="novelty" name="novelty" value="3"/><span>Neutral</span></label>
								<label  class="radio inline"><input type="radio" id="novelty" name="novelty" value="4"/><span>Much</span></label>
								<label  class="radio inline"><input type="radio" id="novelty" name="novelty" value="5"/><span>Very much</span></label>
					</div> 
			      	</td>
					</tr>
				</tbody>				

				 <tbody id="tb5" >
					<tr bgcolor="black">
						<td colspan="2"><label for="tb5" style="color:white">Profile</label></td>
					</tr>
					<tr>
						<td bgcolor="#c9c9e5"><label for="novelty">Do you like this recommendation enough to add it to your profile?</label></td>
			         <td bgcolor="#e8e8e8"> 
			         <div class="maxl">
								<label class="radio inline"><input type="radio" id="addprofile" name="addprofile" value="true"/><span>Yes</span></label>
								<label class="radio inline"><input type="radio" id="addprofile" name="addprofile" value="false"/><span>No</span></label>
					</div> 
			      	</td>
					</tr>
				</tbody>				

		       <tr style='display:none'>
		          <td bgcolor="black"><label style="color:white">Overall rating for this recommendation:</label></td>
		          <td align="center" >
					  <input class="star star-5" id="star-5" type="radio" name="star"/>
					  <label class="star star-5" for="star-5"></label>
					  <input class="star star-4" id="star-4" type="radio" name="star"/>
					  <label class="star star-4" for="star-4"></label>
					  <input class="star star-3" id="star-3" type="radio" name="star"/>
					  <label class="star star-3" for="star-3"></label>
					  <input class="star star-2" id="star-2" type="radio" name="star"/>
					  <label class="star star-2" for="star-2"></label>
					  <input class="star star-1" id="star-1" type="radio" name="star"/>
					  <label class="star star-1" for="star-1"></label>
				</td>
				</tr>

				
		       <tr>
				  <td bgcolor="#c9c9e5"><button id="btr" onclick="removeEvaluation();" class="myButton">Delete</button>&emsp;
		          <button id="btc" onclick="clearEvaluation()" class="myButton">Clear</button>&emsp;
		          <button id="btclose" onclick="closeModal();showHide('mynetworkClear');" class="myButton">Close</button>&emsp;
		          <button id="bte" onclick="saveEvaluation();" class="myButton">Submit</button></td>
		          <td bgcolor="#c9c9e5"><div id="messageEval"/></td>
		      </tr>  
			</table> 
		</div>
  </div>
</div>




	<div id="evaluateOrRec" class="modalReview" style='display:none'>
		<table align="center">
	         <tr>
				<td bgcolor="black"><label id='reviewQuest' style='font-family:arial,helvetica,sans-serif;font-size: 1.2em;color:white'/></td>
		      </tr> 				 
	         <tr align="center">
				  <td align="center" bgcolor="#c9c9e5">
				  <button id="btshowinfobox" onclick="showHide('evaluateOrRec');showInfobox(current_id);" class="myButton">Review</button>&emsp;
		          <button id="btrecommend" onclick="showHide('evaluateOrRec');recommend()" class="myButton">Recommend</button>&emsp;
		          <button id="btclose" onclick="showHide('evaluateOrRec');" class="myButton">Close</button>&emsp;
		          </td>
		      </tr>  
			</table> 
		</div>




<div  id="mynetworkLegend"  style='position: absolute; left: 5px; width: 100px; height: 30px;display:none;'><fieldset>
<legend>Legend:</legend><label class="seed" style="size:300">SEED</label><label class="profile" onclick="editProfile()">USER PROFILE</label><label class="rec">RECOMMENDATIONS</label><label class="recEval">EVALUATIONS</label></fieldset></div>

<div  id="mynetworkClear"  style='position: absolute; left: 210px; width: 125px; height: 80px;display:none;z-index:1;'><fieldset>
<legend>Control:</legend><button id="btnClearNodes" title="You always can clear the graph if you prefer." onclick="resetAll()" class="myButtonInstruction">Clear Nodes</button></fieldset></div>

<div id="mynetwork" style='display:none'></div>

<pre id="eventSpan"></pre>


<script type="text/javascript">




  //var host = "http://localhost:8080";
  //var host = "http://10.243.108.81:8080";
  //var host = "http://192.168.0.5:8081";
  
  //In evaluation mode somes items desapear
  var evaluationMode = true;
  var minProfileSize = 3;
  var evaluationSize = 3;
  
  var network;
  var nodes = new vis.DataSet();
  var edges = new vis.DataSet();
  var gephiImported;
  var nodeSeedsId = [];
  var userProfileIds = [];
  var evaluationIds = [];
  var userid;
  var uri;
  var scorefilter;
  var removeCategory;
  var showTU;
  var topN;
  var showICA;
  var showAll;
  var current_seed;
  var hasWhy = false;
  var nodeWasClicked = false;

  //variables for evaluation
  var underEvaluation;
  var startTime;
  var generalWarningMessage = "";
  
  
  var current_id;  
 
  var modal = document.getElementById('myModal');
  
  var span = document.getElementsByClassName("close")[0];
  
  span.onclick = function() {
	    modal.style.display = "none";
	}

  window.onclick = function(event) {
	    if (event.target == modal) {
	        modal.style.display = "none";
	    }
	}

  function closeModal(){
		modal.style.display = "none";
   }

  /* var nodeContent = document.getElementById('nodeContent'); */
  //initial code that reads a json form a file
  //loadJSON('../dist/lodica.json', redrawAll, function(err) {fire('Something went wrong:'+err)});
  
  var container = document.getElementById('mynetwork');
  
  var data = {
    nodes: nodes,
    edges: edges
  };
   
  var options = {
/* 		  "nodes": {
	            "size": 10,
	            "shadow":true
	        },
	        "edges": {
	            "width": 5,
	           " length": 10,
	            "shadow":true
	       },		  
		  "edges": {
		    "smooth": {
		      "forceDirection": "none"
		    }
		  "physics": {
		    "enabled": true,
		    "barnesHut": {
		        //"gravitationalConstant": -1000,
		        //"centralGravity": 0.5,
		        "springLength": 100,
		        //"springConstant": 0.3,
		        //"damping": 0.09,
		        "avoidOverlap": 0.9
		      }
		  }  */
		}     

  network = new vis.Network(container, data, options); 
  
  network.on('doubleClick', function (params) {
	  if (params.nodes.length > 0) {
		  
		  var canRec = recommendationControl();
		  if(!canRec){return false;}
		  
		  userid = document.getElementById('userid').value.trim();
	      uri = document.getElementById('uri').value.trim();

	      if(!validateQuery(uri)){
			  return false;
		  };   
		  
	      if(!validateUser(userid)){
			  return false;
		  };	      
	      
	      scorefilter = document.getElementById('scorefilter').value;
	      removeCategory = document.getElementById('removeCategory').checked;
	      showTU = document.getElementById('showTU').checked;
	      var similaritymethod = getCheckedSimilarityMethod();
	      topN = document.getElementById('topN').value;
	      showAll = document.getElementById('showAll').checked;
	      var data = nodes.get(params.nodes[0]); // get the data from selected node

	      //getting the childnodes already connected to the seed.
	      var nodeChildIds = "none";
   		  if (!isEmpty(network.getConnectedNodes(data.id))) {
   			  nodeChildIds = network.getConnectedNodes(data.id);
		  }

   		  var uri =  removeNamesplace(data.id);
	      var host = document.getElementById('host').value;
	      var tss = document.getElementById('tss').value;
	      var hybrid = document.querySelector('#volume').value
	      var maxhybrid = document.getElementById('maxhybrid').value;
	      var maxNode = document.getElementById('maxNode').value;
	      var enablecache = document.getElementById('enablecache').checked;	
	      loadJSON(host+"/LODWEB/rest/new/"+userid+"/"+uri+"/"+scorefilter+"/"+removeCategory+"/"+showTU+"/"+topN+"/"+similaritymethod+"/"+showAll+"/"+tss+"/"+hybrid+"/"+maxhybrid+"/"+nodeChildIds+"/"+maxNode+"/"+enablecache+"/"+evaluationMode, redrawAll, displayError);
	      current_id = data.id;
	      current_seed = data.id;
	      startLoaderAnimation();
    }
  });
  
  
	function removeNamesplace(uri){
		var finalString = uri;
		if (finalString.stringContains("http://dbpedia.org/resource/")) {
			finalString = finalString.replace("http://dbpedia.org/resource/","").trim();
		}
		if (finalString.stringContains("http://pt.dbpedia.org/resource/")) {
			finalString = finalString.replace("http://pt.dbpedia.org/resource/","").trim();
		}
		return finalString;
	}  
  
  
  function loadEvaluationSeeds(){

  }
  
  function checkLinkBetweenNodes(nodeFrom,nodeTo){
	  return isInArray(network.getConnectedNodes(nodeFrom),nodeTo);
  }
  
  //network.on('selectNode', function (params) {
  network.on('click', function (params) {
	
	if (params.nodes.length > 0 &amp;&amp; typeof uri !== "undefined") {
		  var data = nodes.get(params.nodes[0]); // get the data from selected node
		  document.getElementById('uri').value  =  data.id;
		  var evaluationSeeds = [];

		 if(evaluationMode){
			 
			  if (document.getElementById('btshowinfobox').style.display=="none"){
				  document.getElementById('btshowinfobox').style.display="block";
				  document.getElementById('messageEval').className = 'myButton';
			  }
			  
			  if (document.getElementById('btrecommend').style.display=="none"){
				  document.getElementById('btshowinfobox').style.display="block";
				  document.getElementById('messageEval').className = 'myButton';

			  }
			 
			 var here = document.getElementsByClassName("seedEvaluation");
			 var inputList = Array.prototype.slice.call(here);
			 for(i = 0;i &lt; inputList.length; i++){
				  if(inputList[i].id.length != 0){
					  evaluationSeeds.push(inputList[i].id);  
			      }
			  }		  
		
			  
			  //alert(nodes.length > minProfileSize);
			  //alert(edges.length);
			  
			  if(!isInArray(evaluationIds,data.id) &amp;&amp; data.id != current_seed){
				 if(isInArray(evaluationSeeds,data.id) &amp;&amp; (nodes.length > minProfileSize+1) &amp;&amp; (nodes.get(data.id)!=null)){
					  alert("You cannot evaluate previous seeds. Please evaluate the recommendations from the current seed.");
					  return;
				  }
			  }
	/* 		  alert(isInArray(evaluationIds,data.id));
			  alert(!isInArray(evaluationSeeds,data.id));
			  alert(data.id != current_seed); */
			  if(isInArray(evaluationIds,data.id) &amp;&amp; !isInArray(evaluationSeeds,data.id) &amp;&amp; data.id != current_seed &amp;&amp; isInArray(userProfileIds,data.id)){
				  current_id = data.id; 
				  hasWhy = false;
				  nodeWasClicked = true;
				  document.getElementById('reviewQuest').innerHTML = 'Would you like to <b>review</b> the evaluation or <b>recommend</b> from <u>'+data.id+'</u> ?'; 
				  showHide('evaluateOrRec');
				  //showInfobox(data.id);  fred
			  //}	else if(document.getElementById('showInfoboxOnClick').checked  &amp;&amp; ((data.id==current_seed) || (  !isInArray(evaluationIds,data.id) &amp;&amp; checkLinkBetweenNodes(current_seed,data.id)     ))      ){
	          }else if(evaluationMode &amp;&amp; isInArray(evaluationIds,data.id) &amp;&amp; isInArray(evaluationSeeds,data.id) &amp;&amp; data.id != current_seed){
				  current_id = data.id; 
				  hasWhy = false;
				  nodeWasClicked = true;
				  document.getElementById('reviewQuest').innerHTML = 'Would you like to <b>recommend</b> from <u>'+data.id+'</u> ? For reviewing, please go the Evaluation Progress.';
				  showHide('btshowinfobox');			  
				  showHide('evaluateOrRec');
				  //showInfobox(data.id);  fred
			  //}	else if(document.getElementById('showInfoboxOnClick').checked  &amp;&amp; ((data.id==current_seed) || (  !isInArray(evaluationIds,data.id) &amp;&amp; checkLinkBetweenNodes(current_seed,data.id)     ))      ){
			  //}else if(document.getElementById('showInfoboxOnClick').checked &amp;&amp; ((data.id==current_seed) || ( checkLinkBetweenNodes(current_seed,data.id)))){			  
				}else if(document.getElementById('showInfoboxOnClick').checked &amp;&amp; (isInArray(evaluationIds,data.id) || (data.id==current_seed) || ( checkLinkBetweenNodes(current_seed,data.id)))){
				  hasWhy = false;
				  nodeWasClicked = true;
				  showInfobox(data.id);  
			  }			  
			  		 
		 }else{
			  if(document.getElementById('showInfoboxOnClick').checked  &amp;&amp; ((data.id==current_seed) || ( checkLinkBetweenNodes(current_seed,data.id)     ))      ){			  
				  hasWhy = false;
				  nodeWasClicked = true;
				  showInfobox(data.id);  
			  }
		 }
		  


    }
  });
  
  
network.on("showPopup", function (params) {
      document.getElementById('eventSpan').innerHTML = '<h2>showPopup event: </h2>' + JSON.stringify(params, null, 4);
  });
  
/*   network.on('oncontext',function (params) {
	  if (params.nodes.length > 0) {
		  var data = nodes.get(params.nodes[0]);
		  var nodeChildIds = network.getConnectedNodes(data.id);
		  nodeChildIds.forEach(function(nodeId) {
			  if(network.getConnectedNodes(nodeId).length==1)
				  nodes.remove({id: nodeId});
		    });
		  //alert(nodeChildIds);
		  //nodeIdnodes.remove(nodeChildIds);
		  nodes.remove({id: data.id});
		  //nodes.remove({nodeChildIds});
	  }
   }); */
  
  
  network.on('oncontext',function (params) {
	  if (params.nodes.length > 0) {
		  var data = nodes.get(params.nodes[0]);
		  removeNode(data.id);
	  }
   });  
  
  network.on('oncontext',function (params) {
	  if (params.edges.length > 0) {
		  var data = edges.get(params.edges[0]);
		  edges.remove({id: data.id});
	  }
   }); 
  
  
/*   function display(){
	  Response res = Jsoup.connect("http://en.wikipedia.org/wiki/Tom_Cruise").execute();
	  String html = res.body();
	  Document doc2 = Jsoup.parseBodyFragment(html);
	  Element body = doc2.body();
	  Elements tables = body.getElementsByTag("table");
	  for (Element table : tables) {
	      if (table.className().contains("infobox")==true) {
	          System.out.println(table.outerHtml());
	          break;
	      }
	  }
  } */
  
  function isValid(str) {
	    var iChars = "~`!#$%^&amp;*+=-[]\\\';,/{}|\":&lt;>?";
	    for (var i = 0; i &lt; str.length; i++) {
	       if (iChars.indexOf(str.charAt(i)) != -1) {
	           return false;
	       }	
	    }
	    return true;
	}
  
  
  function signout(){
	    window.location=document.getElementById('host').value+"/LODWEB/faces/index.xhtml";
	 }  

  function validateQuery(uri) {

	  if(uri.trim() === ""){
		  fire("Please enter a query.");
		  return false;
	  }

/* 	  if(!isValid(uri)){
		    fire("Your query has special characters that are not allowed.");
		    return false;
	   } */ 

	  return true;
  }
  
  
  function showRow(id) {
      try {
    	  if (document.getElementById(id).style.display == "none") {
    		  document.getElementById(id).style.display = "table-row";
 		  }
      }
      catch (err) {
      }
  }
  
  function hideRow(id) {
      try {
    	  if (document.getElementById(id).style.display == "table-row"  ||  document.getElementById(id).style.display == "block") {
    		  document.getElementById(id).style.display = "none";
 		  }
      }
      catch (err) {
      }
  }
  
  function hide(id) {
	  if (document.getElementById(id).style.display=="block"){
		  document.getElementById(id).style.display="none";
	  }
  }
  
  function show(id) {
	  if (document.getElementById(id).style.display=="none"){
		  document.getElementById(id).style.display="block";
	  }
  }
  
  function showHide(id) {
	  if (document.getElementById(id).style.display=="none"){
		  document.getElementById(id).style.display="block";
	  }else{
		  document.getElementById(id).style.display="none";
	  }
  }
  
  function showHideRow(id) {
	  //alert(id);
	  //alert(document.getElementById(id).style.display);
	  if (document.getElementById(id).style.display=="none"){
		  document.getElementById(id).style.display="table-row";
	  }else{
		  document.getElementById(id).style.display="none";
	  }
  }  
  
  function setTestHost(){

	  var href = window.location.href;
	  var pathname = window.location.pathname;
	  //alert(href);
	  //alert(pathname);
	  var serverHost = href.replace(pathname,"");
	  //alert(serverHost);
	  document.getElementById('host').value = serverHost;
	  //alert(serverHost);
/* 	  alert(isValidURL(serverHost));
	  
	  if(isValidURL(serverHost)){
		  document.getElementById('host').value = serverHost;
	  }else{
		  alert("You URL you trying to access is offline. Please contact the admin.");
	  } */
  }
  
  function register() {
      try {
     	 
    	 setTestHost();
     	 
     	 var first = document.getElementById('first').value;
   	     var second = document.getElementById('second').value;
   	     var email = document.getElementById('email').value;
		 var password = document.getElementById('password').value;
		 var country = document.getElementById('country').value;
		 
		 if (!validateEmail(email)){
   		 	 document.getElementById('messageInitRegister').innerHTML = 'E-mail format invalid.';
   	  	 	 document.getElementById('messageInitRegister').style.display = "block";
   		 	 document.getElementById('messageInitRegister').style.color = '#179b77';
	   	     setTimeout(function(){ document.getElementById('messageInitRegister').style.display = "none";}, 3000);
			 return;
		 }
    	  
    	 if (first.trim()=="" || second.trim()=="" || email.trim()=="" || password.trim()==""  || country.trim()=="" || country.trim()=="-1") {
    		  document.getElementById('messageInitRegister').innerHTML = 'Required fields (*) must be filled out.';
        	  document.getElementById('messageInitRegister').style.display = "block";
        	  document.getElementById('messageInitRegister').style.color = '#179b77';
        	  setTimeout(function(){ document.getElementById('messageInitRegister').style.display = "none";}, 3000);
        	  return;
  	     }
    	 
    	 
 	    	  document.getElementById('messageInitRegister').innerHTML = 'Registering...';
 	    	  document.getElementById('messageInitRegister').style.display = "block";
 	    	  document.getElementById('messageInitRegister').style.color = '#179b77';
 	    	  setTimeout(function(){ document.getElementById('messageInitRegister').style.display = "none";}, 10000);    	  
  			 
 	    	 var agerange = document.getElementById('agerange').value;
  			 var sex = document.getElementById('sex').value;
  			 var host = document.getElementById('host').value;
  			 
  	  	     loadJSONNotParse(host+"/LODWEB/rest/register/"+first+"/"+second+"/"+email+"/"+password+"/"+sex+"/"+agerange+"/"+country, posregister, displayError);  	    	 
     }
      catch (err) {
      }
  }
  
  function validateEmail(email) {
	  var re = /\S+@\S+\.\S+/;
	  return re.test(email);
	}

  function login() {
      try {
    	 
    	  setTestHost();
    	 
   	     var email = document.getElementById('emaillogin').value;
		 var password = document.getElementById('passwordlogin').value;
		 var host = document.getElementById('host').value;
  	     loadJSONNotParse(host+"/LODWEB/rest/login/"+email+"/"+password, posregister, displayError);
  	     profile();
		 if(evaluationMode){
			  evaluationLog();
		 }
      }
      catch (err) {
    	  alert("Either your e-mail or your password is wrong. Please try it again.");
      }
  }  
  
  function posregister(JSONObject){
	  if (JSONObject==="login.failed") {
		  //alert("Either your e-mail or your password are wrong. Please try it again.");
    	  document.getElementById('messageInit').innerHTML = 'Either your e-mail or your password are wrong. Please try it again.';
    	  document.getElementById('messageInit').style.display = "block";
    	  document.getElementById('messageInit').style.color = '#179b77';
    	  setTimeout(function(){ document.getElementById('messageInit').style.display = "none";}, 5000);		  
	  }else{
		  var jsonResponse = JSON.parse(JSONObject);
		  document.getElementById('userid').value = jsonResponse.userid;
		  document.getElementById('username').innerText = jsonResponse.first +" "+jsonResponse.second;
		  document.getElementById('loginform').style.display = "none";
		  document.getElementById('control').style.display = "block";
		  document.getElementById('mynetwork').style.display = "block";
		  document.getElementById('mynetworkLegend').style.display = "block";
		  document.getElementById('mynetworkClear').style.display = "block";
		  
		  profile();
		  if(evaluationMode){
			  evaluationLog();
		  }
	  }
  } 
  
  function enableLogin(status){
	  if (status==false){
		  document.getElementById('loginform').style.display = "none";
		  document.getElementById('control').style.display = "block";
		  document.getElementById('mynetwork').style.display = "block";
		  document.getElementById('mynetworkLegend').style.display = "block";
		  document.getElementById('mynetworkClear').style.display = "block";
	  }
  }
  
  function getValueCheckedRation(name){
	  var rates = document.getElementsByName(name);
	  var rate_value;
	  for(var i = 0; i &lt; rates.length; i++){
	      if(rates[i].checked){
	          rate_value = rates[i].value;
	      }
	  }
	  return rate_value;
  }
  
  function getCheckedSimilarityMethod(){
	  var sim = "";
      if(document.querySelector('input[name="similarityMethod"]:checked')!=null){
    	  sim = document.querySelector('input[name="similarityMethod"]:checked').value;
      }   
      return sim;
  }

  var strategy="";
  
  function saveEvaluation() {
      try {

    	if(nodes.get(current_id)!=null){
	    	var explanation = JSON.stringify(nodes.get(current_id).attributes.why,null,4);
	    	if (explanation!=null &amp;&amp; stringContains(explanation,"The resource")){
	    		strategy = "hybrid";
	    	}else if (explanation!=null &amp;&amp; stringContains(explanation,"The distance")){
	    		strategy = "none";			
	    	}
		}else if(strategy==""){
	      		strategy = "none"
		}

    	var similaritymethod = getCheckedSimilarityMethod();
        var host = document.getElementById('host').value;
        var accuracy = 0;
        var understand = 0;
        var satisfaction = 0;
        var accuracy = 0;
        var addprofile = 0;
        
        if(document.querySelector('input[name="accuracy"]:checked')!=null){
        	accuracy = document.querySelector('input[name="accuracy"]:checked').value;	
        }
        
        if(document.querySelector('input[name="understand"]:checked')!=null){
        	understand = document.querySelector('input[name="understand"]:checked').value;	
        }
        
        if(document.querySelector('input[name="satisfaction"]:checked')!=null){
        	satisfaction = document.querySelector('input[name="satisfaction"]:checked').value;	
        }
        
        if(document.querySelector('input[name="novelty"]:checked')!=null){
        	novelty = document.querySelector('input[name="novelty"]:checked').value;	
        }
        
        if(document.querySelector('input[name="addprofile"]:checked')!=null){
        	addprofile = document.querySelector('input[name="addprofile"]:checked').value;	
        }        
        
   		var star = 0;
		  if (document.getElementById('star-5').checked) {
			  star = 5;
		  } else if (document.getElementById('star-4').checked) {
			  star = 4;
		  } else if (document.getElementById('star-3').checked) {
			  star = 3;
		  } else if (document.getElementById('star-2').checked) {
			  star = 2;
		  } else if (document.getElementById('star-1').checked) {
			  star = 1;
		  }
		var elapsedTime = Date.now() - startTime;
  	   	if(typeof current_seed === "undefined"){  	   		
			setWarningMessage("Recommendations must be generated to be evaluated.");
  	   	}else if (elapsedTime &lt;  3000 ){
  	   		setFailMessage("You are too fast my friend. Take your time.");
  	   	    startTime = Date.now();
  	   	//}else if (star == 0 || accuracy == 0 || understand == 0 || satisfaction == 0 || novelty == 0 || addprofile == 0 ){
  	   	}else if (understand == 0 || satisfaction == 0 || novelty == 0 || addprofile == 0 ){
  	   		setWarningMessage(" All questions are required :)");
  	    //}else if ((satisfaction == 1 || satisfaction == 2) &amp;&amp; addprofile == "true"  &amp;&amp; confirm("You are not satisfied with this recommendation but you are adding it to your profile. Are you okay with that?") ){
        }else if ((satisfaction == 1 || satisfaction == 2) &amp;&amp; addprofile == "true"){  	    	
  	   		loadJSONNotParse(host+"/LODWEB/rest/eval/"+userid+"/"+current_id+"/"+current_seed+"/"+similaritymethod+"/"+strategy+"/"+star+"/"+accuracy+"/"+understand+"/"+satisfaction+"/"+novelty+"/"+addprofile,posEvaluation, displayError);
  	    }else{
			loadJSONNotParse(host+"/LODWEB/rest/eval/"+userid+"/"+current_id+"/"+current_seed+"/"+similaritymethod+"/"+strategy+"/"+star+"/"+accuracy+"/"+understand+"/"+satisfaction+"/"+novelty+"/"+addprofile,posEvaluation, displayError);			
		}
      }
      catch (err) {
         // alert(err);
      }
  }
  
  
  function checkQuestion(question){
   if (confirm(question) == true) {
	     return true;
	  } else {
	    return false;
	  }
  }
  
  function clearCache() {
      try {
    	  var host = document.getElementById('host').value;
	   	  loadJSONNotParse(host+"/LODWEB/rest/clearcache/"+userid,posClearCache, displayError);
      }
      catch (err) {
         // alert(err);
      }
  } 
  
  function posClearCache() {
      try {
		 showMessage("Cache is clear");
		 setInterval(hideMessage,3000);
      }
      catch (err) {
      }
  }   
  
  
  function removeEvaluationItem(uri,seed) {
      try {
    	var similaritymethod = getCheckedSimilarityMethod();
        var host = document.getElementById('host').value;
        current_id = uri;
        current_seed = seed;
  	   	loadJSONNotParse(host+"/LODWEB/rest/removeevaluation/"+userid+"/"+uri+"/"+current_seed+"/"+similaritymethod,posRemoveEvaluatedItem, displayError);
      }
      catch (err) {
         // alert(err);
      }
  } 
  
  function posRemoveEvaluatedItem() {
      try {
    	  removeprofile(current_id);
    	  remove(evaluationIds,current_id);
   		  colorNodes();
    	  evaluationLog();
      }
      catch (err) {
      }
  }   

  function removeEvaluation() {
      try {
 	  	var similaritymethod = getCheckedSimilarityMethod()
        var host = document.getElementById('host').value;
  	   	if(typeof current_seed === "undefined"){  	   		
			setWarningMessage("Recommendations must be generated to be evaluated.");
		}else{
			loadJSONNotParse(host+"/LODWEB/rest/removeevaluation/"+userid+"/"+current_id+"/"+current_seed+"/"+similaritymethod,posEvaluationRemoval,displayError);
		}
      }
      catch (err) {
         // alert(err);
      }
  }  
  
  
  function addprofileFromEvaluation() {
 	  if (!isInArray(userProfileIds,current_id)) {
   		var host = document.getElementById('host').value;
 		  	loadJSONNotParse(host+"/LODWEB/rest/updateprofile/"+userid+"/"+current_id+"/LIKE",setProfile,displayError);
 		  	updateImage(current_id,"like"); 
  	  } 
  }
  
  function posEvaluationRemoval() {
      try {
   		  removeprofileFromModal(current_id);
   		  
   		  //remove from variable
   		  remove(evaluationIds,current_id);

   		  colorNodes();
   		  
    	  document.getElementById('messageEval').innerHTML = 'Evaluation removed from the database';
    	  document.getElementById('messageEval').style.display = "block";
    	  document.getElementById('messageEval').className = 'success';
    	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 4000);
    	  evaluationLog();
    	  clearEvaluation();
      }
      catch (err) {
      }
  }
  

  function stringContains(mainString,substring) {
	  if(mainString.indexOf(substring) !== -1){
		  return true;
	  }else{
		  return false;
	  }
  }
  


  function posEvaluation(message) {
      try {

    	strategy = "";
    	
    	if(stringContains(message,"Only")){
    	  document.getElementById('messageEval').innerHTML = message;
    	  document.getElementById('messageEval').style.display = "block";
    	  document.getElementById('messageEval').className = 'failure';
    	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 4000); 
	  }else{
    	  evaluationLog();

    	  //add variable
    	  evaluationIds.push(current_id);
    	  colorNodes();
    	  
    	  var addprofile = document.querySelector('input[name="addprofile"]:checked').value;
    	  if (addprofile=="true" &amp;&amp; evaluationMode){
    		  addprofileFromEvaluation();
  		   }else if (addprofile=="false" &amp;&amp; evaluationMode){
   			removeprofileFromModal(current_id);	 
   		  }
    	  document.getElementById('messageEval').innerHTML = 'Evaluation Registered';
    	  document.getElementById('messageEval').style.display = "block";
    	  document.getElementById('messageEval').className = 'success';
    	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 4000); 
	  }



    	  
      }catch (err) {
      }
  }

  function setSuccessMessage(message){
	  document.getElementById('messageEval').innerHTML = message;
	  document.getElementById('messageEval').style.display = "block";
	  document.getElementById('messageEval').className = 'success';
	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 3000);
  }
  
  function setFailMessage(message){
	  document.getElementById('messageEval').innerHTML = message;
	  document.getElementById('messageEval').style.display = "block";
	  document.getElementById('messageEval').className = 'failure';
	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 3000);
  }
  
  function setWarningMessage(message){
	  document.getElementById('messageEval').innerHTML = message;
	  document.getElementById('messageEval').style.display = "block";
	  document.getElementById('messageEval').className = 'warning';
	  setTimeout(function(){ document.getElementById('messageEval').style.display = "none";}, 3000);
  }   
  
  // load the evaluations already registered and set on the screem
  function getEvaluation() {
      try {
        var similaritymethod = getCheckedSimilarityMethod();
        var host = document.getElementById('host').value;
  	   	if(typeof current_seed === "undefined"){  	   		
			  alert("Recommendations must be generated to be evaluated.");
		}else{
			loadJSONNotParse(host+"/LODWEB/rest/retrieveevalulation/"+userid+"/"+current_id+"/"+current_seed+"/"+similaritymethod,setEvaluation,displayError);
		}
      }
      catch (err) {
         // alert(err);
      }
  }
  
  
  function clearEvaluation() {
		document.getElementById('star-5').checked = false;
		document.getElementById('star-4').checked = false;
		document.getElementById('star-3').checked = false;
		document.getElementById('star-2').checked = false;
		document.getElementById('star-1').checked = false;
		$("input[name='accuracy']").attr("checked", false);
		$("input[name='understand']").attr("checked", false);
		$("input[name='satisfaction']").attr("checked", false);
		$("input[name='novelty']").attr("checked", false);
		$("input[name='addprofile']").attr("checked", false);
  }
  
  function setEvaluation(JSONObject) {
      try {
    	var jsonResponse = JSON.parse(JSONObject);
    	/* alert(jsonResponse);
    	console.log(jsonResponse);
    	 */
    	clearEvaluation();
    	if (jsonResponse!=null) {
     		//alert(jsonResponse);
     		//alert("hello"); 
     		strategy = jsonResponse.strategy;
     		$("[name=accuracy]").val([jsonResponse.accuracy]);
    		$("[name=understand]").val([jsonResponse.understand]);
    		$("[name=satisfaction]").val([jsonResponse.satisfaction]);
    		$("[name=novelty]").val([jsonResponse.novelty]);
    		$("[name=addprofile]").val([jsonResponse.addprofile]);
    		if (jsonResponse.star==5) {
    		 	document.getElementById('star-5').checked = true;
    		} else  if (jsonResponse.star==4) {
    		 	document.getElementById('star-4').checked = true;
    		} else  if (jsonResponse.star==3) {
    		 	document.getElementById('star-3').checked = true;
    		} else  if (jsonResponse.star==2) {
    		 	document.getElementById('star-2').checked = true;
    		} else  if (jsonResponse.star==1) {
    		 	document.getElementById('star-1').checked = true;
    		}
    		startTime = Date.now();
		}else{
			//alert("this is nulll");
		}
      }
      catch (err) {
      }
  }    
   
	function recommendationControl(){

		if(!validateSimilarityMethod()){
			return false;
		}
		
		generalWarningMessage = "";
		
		var recControl = false;
		
		
		if(evaluationMode){

			  	  	  if(userProfileIds.length &lt; minProfileSize){
			  	  		generalWarningMessage = "Recommendations can be generated only if "+minProfileSize+" items are in your profile.";
						  //fire("Recommendations can be generated only if "+minProfileSize+" items are in your profile.");
			  	  	  }else if(document.getElementsByClassName("seedEvaluation")!=null ){
				 	  	 
			  	  		 var here = document.getElementsByClassName("seedEvaluation");
			
						 var inputList = Array.prototype.slice.call(here);
						 
						 var uri = document.getElementById('uri').value.trim();
						 
						 var evaluationSeeds = [];
			
						 for(i = 0;i &lt; inputList.length; i++){
							  if(inputList[i].id.length != 0){
								  evaluationSeeds.push(inputList[i].id);  
						      }
						  }
						 var recommendationEvaluatedClass = document.getElementsByClassName("recommendationEvaluatedClass");
			
						 var inputListEvaluationIds = Array.prototype.slice.call(recommendationEvaluatedClass);
			
						 var evaluationIds = [];
			
						 for(i = 0;i &lt; inputListEvaluationIds.length; i++){
							  if(inputListEvaluationIds[i].id.length != 0){
								  evaluationIds.push(inputListEvaluationIds[i].id);  
						      }
						  }	
						 
					/* 	 alert(evaluationSeeds.length);
						 alert(inputListEvaluationIds.length); */
						 
						// alert(document.getElementById('missing'));
						 //alert( Array.prototype.slice.call(document.getElementById('missing'))[0].name);
						 //alert(uri);
						 //alert(!isInArray(evaluationSeeds,uri));
						 
//fred

 					       var here = document.getElementsByClassName("pick");
 					       var pickList = Array.prototype.slice.call(here);
 					       var seedsWithSkips = 0;
 					       if(pickList.length>0){
 					    	  seedsWithSkips = (pickList.length%evaluationSize)+1;   
 					       }
 					       
 					       var realEvaluatedSeeds = evaluationSeeds.length - seedsWithSkips;
 					       
/*  					      alert(realEvaluatedSeeds);
 					     alert(seedsWithSkips);
 					    alert(evaluationSeeds.length);  */
 					   //alert('problema 88888888888888888');
 					
						  if(realEvaluatedSeeds &lt;=evaluationSize &amp;&amp; (inputListEvaluationIds.length-seedsWithSkips) &lt;(evaluationSize*evaluationSize) &amp;&amp; document.getElementById('missing')!=null){
							  if (document.getElementById('missing').getAttribute("name") != uri){
								  generalWarningMessage = "Please pick the <b>first SEED</b> from missing evaluation(s) in order to generate new recommendations.";
							  }else{
								  recControl = true;
							  }	
						  }else if(realEvaluatedSeeds &lt;=evaluationSize &amp;&amp; (inputListEvaluationIds.length-seedsWithSkips) &lt;(evaluationSize*evaluationSize) &amp;&amp; isInArray(evaluationSeeds,uri) &amp;&amp;  document.getElementById('missing')==null){
								  generalWarningMessage = "Please pick another <b>SEED</b> from your profile to generate new recommendations.";
								  //fire(generalWarningMessage);								  
						  } else if(document.getElementById('missing')!=null &amp;&amp; edges.length &lt;= 0  ){
							  if (document.getElementById('missing').getAttribute("name") != uri){
								  generalWarningMessage = "Please pick the <b>SEED</b> from missing evaluation(s) in order to generate new recommendations.";
							  }else{
								  generalWarningMessage = "Enjoy your evaluation(s).";
								  recControl = true;
							  }
						  }else if(document.getElementById('missing')!=null &amp;&amp; edges.length > 0){
							  generalWarningMessage = "There are missing evaluations to be evaluated before recommend.";
						  }else if(realEvaluatedSeeds == evaluationSize &amp;&amp; (inputListEvaluationIds.length-seedsWithSkips) == (evaluationSize*evaluationSize) &amp;&amp; document.getElementById('missing')==null){
							  generalWarningMessage = "Thanks! You evaluation is finished. You can edit your evaluations by clicking on them or sign out.";
						  }else if(!isInArray(userProfileIds,uri)){
								  generalWarningMessage = "Please pick a <b>SEED</b> from your profile in order to generate recommendations.";
								  //fire(generalWarningMessage);
						  } else {
							  //alert('problema 000000000000');
						  	  recControl = true;
					  	  }
						  
				  	} else {
				  		//alert('problema 11111');
				  		recControl = true;
			  	  	} 
			  
		}else{
			//alert('problema 222222');
	    	recControl = true;
  	    }
		
		//alert('fimmmmmmmmmm');
		//alert(generalWarningMessage); 
		
		if(generalWarningMessage.length > 0 &amp;&amp;  evaluationMode){
			fireEvaluationMessage(generalWarningMessage);
		}
/* 		if(generalWarningMessage.length > 0){
			fire(generalWarningMessage,4000);	
		} */
		
		/* alert("dddddddddddd");
		alert(recControl); */
		return recControl;
	}
  
  function recommend() {
       try {
    	   
    	   hideProfileEdition();
    	   
    	   	  var canRec = recommendationControl();
    	   	  //alert(canRec);
    	   	  if(!canRec){return false;}
    	   	  
    	 
    	   	 
    	   	  
    	   	  uri = document.getElementById('uri').value.trim();
    	      userid = document.getElementById('userid').value.trim();
    	      
    	      if(!validateQuery(uri)){
    			  return false;
    		  };   
    	      if(!validateUser(userid)){
    			  return false;
    		  };
    		  
    		  if( hasWhiteSpace(uri) ){
    			  fire("You query cannot have blank spaces.");
    			  return false;
    		  }
    		  
    		 // alert(uri);
    		  
    		  
    		  scorefilter = document.getElementById('scorefilter').value;
    	      removeCategory = document.getElementById('removeCategory').checked;
    	      showTU = document.getElementById('showTU').checked;
    	      var similaritymethod = getCheckedSimilarityMethod();
    	      topN = document.getElementById('topN').value;
    	      showAll = document.getElementById('showAll').checked;
    	      var host = document.getElementById('host').value;
    	      var tss = document.getElementById('tss').value;
    	      var hybrid = document.querySelector('#volume').value;
    	      var maxhybrid = document.getElementById('maxhybrid').value;
    	      var maxNode = document.getElementById('maxNode').value;
	   		  
    	      //getting the childnodes already connected to the seed.
    	      var nodeChildIds = "none";
	   		  if (!isEmpty(network.getConnectedNodes(uri))) {
	   			  nodeChildIds = network.getConnectedNodes(uri);
			  }
	   		
		      var enablecache = document.getElementById('enablecache').checked;	      
		      loadJSON(host+"/LODWEB/rest/new/"+userid+"/"+uri+"/"+scorefilter+"/"+removeCategory+"/"+showTU+"/"+topN+"/"+similaritymethod+"/"+showAll+"/"+tss+"/"+hybrid+"/"+maxhybrid+"/"+nodeChildIds+"/"+maxNode+"/"+enablecache+"/"+evaluationMode, redrawAll, displayError);	   		  

	   		  startLoaderAnimation();  
    	      current_id = uri;
    	      current_seed = uri;
       }
       catch (err) {
         // alert(err);
       }
   }
  
  function clearItems() {
      try {
    		  document.getElementById('itemListRow').style.display = "none";
      }catch (err) {
         // alert(err);
      }
  } 
  
  function loadItems(item) {
      try {
		  if (document.getElementById('itemListRow').style.display == "none") {
			  document.getElementById('itemListRow').style.display = "table-row";
		  }
    	  var host = document.getElementById('host').value;
    	  loadJSONNotParse(host+"/LODWEB/rest/elicitation/"+item,browseItems,displayError);
      }
      catch (err) {
         // alert(err);
      }
  }  
  
  
  function searchItemsKey() {
	  //event.preventDefault();
	  if (event.keyCode == 13) {
	   	searchItems();
	  }
  } 
  
  function searchItems() {
      try {
    	  var host = document.getElementById('host').value;
    	  var query = document.getElementById('searchItem').value;
    	  if(query === ""){
    		  fire("Please enter a query.");
    	  }else{
    		  if (document.getElementById('itemListRow').style.display == "none") {
    			  document.getElementById('itemListRow').style.display = "table-row";
    		  }
    		  loadJSONNotParse(host+"/LODWEB/rest/searchitem/"+query,browseItems,displayError);  
    	  }
      }
      catch (err) {
         // alert(err);
      }
  }  
  
  function browseItems(items) {
	  document.getElementById('itemListResult').innerHTML = items;
  }   
  
  function removeNode(uri) {
	  var nodeChildIds = network.getConnectedNodes(uri);
	  nodeChildIds.forEach(function(nodeId) {
		  if(network.getConnectedNodes(nodeId).length==1)
			  nodes.remove({id: nodeId});
	    });
	  nodes.remove({id: uri});

  }  
  
  function editProfile() {
      try {
    	  if (document.getElementById('preferenceElicitationRow').style.display == "none") {
    		  document.getElementById('preferenceElicitationRow').style.display = "table-row";
 		  }else{
			  document.getElementById('preferenceElicitationRow').style.display = "none";
			  document.getElementById('itemListRow').style.display = "none";
		  }
      }
      catch (err) {
      }
  }
  
  
  function hideProfileEdition() {
      try {
		  document.getElementById('preferenceElicitationRow').style.display = "none";
		  document.getElementById('itemListRow').style.display = "none";
      }
      catch (err) {
      }
  }
  

  function evaluationLog() {
      try {
    	  var similaritymethod = getCheckedSimilarityMethod();
    	  //alert(similaritymethod);
    	  if(similaritymethod.length>0){
              var host = document.getElementById('host').value;
        	  var userid = document.getElementById('userid').value;
        	  loadJSONNotParse(host+"/LODWEB/rest/evaluationlog/"+userid+"/"+similaritymethod,showEvaluationLog,displayError);    		  
    	  }
      }
      catch (err) {
      }
  } 
  
  function validateSimilarityMethod() {
      try {
    	  if(!getCheckedSimilarityMethod()>0){
    	      fire("Your recommender is not set.",7000);
              return false;
    	  }else{
    		  return true;
    	  }
      }
      catch (err) {
      }
  }  

  function showEvaluationLog(JSONObject) {
      try {
    	  //fred
    	  var jsonResponse = JSON.parse(JSONObject);
    	  if (evaluationMode) {
	    	  //alert(jsonResponse.evaluationLogTable);
	    	  //alert(jsonResponse.evaluationLogMessage);
    	   	  document.getElementById('evaluationRow').style.display = "table-row";
/* 	    	  var canRec = recommendationControl();
	    	  alert(canRec);
    	   	  if(!canRec &amp;&amp; generalWarningMessage.length==0){
    	   		document.getElementById('evaluationLogMessage').innerHTML = "<label>"+jsonResponse.evaluationLogMessage+"</label>";    	   		
    	   	  }else if(!canRec &amp;&amp; generalWarningMessage.length>0){
      	   		document.getElementById('evaluationLogMessage').innerHTML = "<label>"+generalWarningMessage+"</label>";
      	   	  }else{
    	   		document.getElementById('evaluationLogMessage').innerHTML = jsonResponse.evaluationLogMessage;    
    	   	  } */
    	   	  
    	   	  document.getElementById('evaluationLogMessage').innerHTML = jsonResponse.evaluationLogMessage;  
    	   	  
    	   	  document.getElementById('evaluationLogMessage').className = "instruction-light";
	    	  
	    	  //showHide('evaluationLogTableRow');
	    	  document.getElementById('evalHeaderInstructions').style.display = "table-row";
	    	  document.getElementById('evaluationLogTableRow').style.display = "table-row";
	    	  document.getElementById('evaluationLogTable').innerHTML = jsonResponse.evaluationLogTable;
	    	  if(jsonResponse.evaluationLogTable==""){
	    		  document.getElementById('evaluationLogTableRow').style.display = "none";  
	    	  }
	    	  
		  }else{
			  document.getElementById('evaluationLogTableRow').style.display = "none"; 
			  document.getElementById('evaluationRow').style.display = "none";
			  document.getElementById('evalHeaderInstructions').style.display = "none";
			  
		  }    	  
      }catch (err) {
      }
  }
  
  function showButtons(control) {
      try {
    	  if (control) {
    		  document.getElementById('settingsBtn').style.display = "block";
    		  document.getElementById('btnFreezeNodes').style.display = "block";
    		  document.getElementById('thelist').style.display = "block";
    		  document.getElementById('infoboxQuery').style.display = "block";
 		  }else{
 			  document.getElementById('settingsBtn').style.display = "none";
 			 document.getElementById('btnFreezeNodes').style.display = "none";
    		  document.getElementById('thelist').style.display = "none";
    		  document.getElementById('infoboxQuery').style.display = "none";    		  
		  }
      }
      catch (err) {
      }
  } 
  
  function enableEvaluation() {
      try {
    	  
    	var enableEvaluation = document.getElementById('underEvaluation').checked;
    	  
    	if (enableEvaluation) {
    		  evaluationMode = true;
    		  evaluationLog();
		}else{
 			 evaluationMode = false;
 			 evaluationLog();
 			 
		  }
      }
      catch (err) {
      }
  }

  function enableFilters() {
      try {
    	  
    	  var enableFilter = document.getElementById('filters').checked;
    	  
    	  if (enableFilter) {
    		  document.getElementById('scoreFilterRow').style.display = "table-row";
    		  document.getElementById('topnFilterRow').style.display = "table-row";
    		  document.getElementById('hibridRow').style.display = "table-row";
    		  document.getElementById('maxNodeRow').style.display = "table-row";
 		  }else{
    		  document.getElementById('scoreFilterRow').style.display = "none";
    		  document.getElementById('topnFilterRow').style.display = "none";
    		  document.getElementById('hibridRow').style.display = "none";
    		  document.getElementById('maxNodeRow').style.display = "none";
		  }
      }
      catch (err) {
      }
  }   

  function profile() {
      try {
    	  document.getElementById('preferenceElicitationRow').style.display = "none";
    	  document.getElementById('itemListRow').style.display = "none";
    	    userid = document.getElementById('userid').value;
            var host = document.getElementById('host').value;
            loadJSONNotParse(host+"/LODWEB/rest/profile/"+userid,setProfile,displayError);
            current_id = document.getElementById('uri').value;
            
      }
      catch (err) {
          //alert(err);
      }
  }
  
  function updateUri() {
	  try {
    	  uri = document.getElementById('uri').value.trim();
    	  current_id = document.getElementById('uri').value;
      }
      catch (err) {
          //alert(err);
      }
  } 
  

  
  Array.prototype.remove = function(elem, all) {
	  for (var i=this.length-1; i>=0; i--) {
	    if (this[i] === elem) {
	        this.splice(i, 1);
	        if(!all)
	          break;
	    }
	  }
	  return this;
	};

  function setProfile(userProfile) {
	  userProfileIds.length = 0;
	  //alert(userProfile);
	  nodeContent.innerHTML = userProfile;
	  //var here = document.getElementsByTagName('img');
	  var here = document.getElementsByClassName("userProfileRest");
	  var inputList = Array.prototype.slice.call(here);
	  for(i = 0;i &lt; inputList.length; i++){
		  if(inputList[i].id.length != 0 &amp;&amp; !isInArray(userProfileIds,inputList[i].id)){
	    	  userProfileIds.push(inputList[i].id);  
	      }
	  }
	  
	  
	  document.getElementById('profilesize').innerHTML = userProfileIds.length;
	  
	  colorNodes();
	  if(evaluationMode){
		  evaluationLog();
	  }
  } 
  
  Array.prototype.remove = function(elem, all) {
	  for (var i=this.length-1; i>=0; i--) {
	    if (this[i] === elem) {
	        this.splice(i, 1);
	        if(!all)
	          break;
	    }
	  }
	  return this;
	};
  

	function addprofile() {
	  try {
     	  if (!isInArray(userProfileIds,current_id)) {
    		var host = document.getElementById('host').value;
   		  	loadJSONNotParse(host+"/LODWEB/rest/updateprofile/"+userid+"/"+current_id+"/LIKE",setProfile,displayError);
   		  	updateImage(current_id,"like");
    	  } 
      }
      catch (err) {
          alert(err);
      }
  }
  
  function elicitPreference(clickedId) {
	  current_id = clickedId.replace("imgid_","").trim();
	  if(!isInArray(userProfileIds,current_id)){
  			var host = document.getElementById('host').value;
		  	loadJSONNotParse(host+"/LODWEB/rest/updateprofile/"+userid+"/"+current_id+"/LIKE",setProfile,displayError);
		  	document.getElementById("imgid_"+current_id).style.border = '10px solid #1ab188';
	  }else{
		  removeprofile(current_id);
	  }
  }  
  
  function remove(arr, what) {
	    var found = arr.indexOf(what);

	    while (found !== -1) {
	        arr.splice(found, 1);
	        found = arr.indexOf(what);
	    }
	}

  
  function removeprofileFromModal(uri) {
      try {
            if(uri!=null){
            	updateImage(uri,"neutral");
            	remove(userProfileIds,uri);
            	var host = document.getElementById('host').value;
            	loadJSONNotParse(host+"/LODWEB/rest/updateprofile/"+userid+"/"+uri+"/DISLIKE",setProfile,function(err){console.log('error')});
            }
      }
      catch (err) {
          alert(err);
      }
  } 
  
  function removeprofile(uri) {
      try {
            if(uri!=null){
            	remove(userProfileIds,uri);
            	var host = document.getElementById('host').value;
            	loadJSONNotParse(host+"/LODWEB/rest/updateprofile/"+userid+"/"+uri+"/DISLIKE",setProfile,function(err) {console.log('error')});
            	
            	//In case user elicitation is taking place
            	if(document.getElementById("imgid_"+current_id)!=null){
            		document.getElementById("imgid_"+current_id).style.border = 'none';
            	}
            }
      }
      catch (err) {
          alert(err);
      }
  }   
  
  
  function removeFromArray(uri,array){

	  var index = array.indexOf(uri);
	  if (index > -1) {
		  array.splice(index, 1);
		  return array;
	  }
  }
  
  function isInArray(array, search){
      return array.indexOf(search) >= 0;
  }
  
  function startLoaderAnimation() {
	  //var startTime = Date.now();
	  showHideRow('loaderRow');
      document.getElementById('loader').className = "loaderMov";

/*       var elapsedTime = Date.now() - startTime;
      alert(elapsedTime);
      
	if ((document.getElementById(id).style.display="table-row") &amp;&amp; (elapsedTime >  3000) ){
		  setTimeout(function(){ document.getElementById('loader').innerHTML = "Please be patient.";}, 3000);
		//startTime = Date.now();
	}
	
    if (document.getElementById(id).style.display="table-row" &amp;&amp; (elapsedTime >  6000) ){
		  setTimeout(function(){ document.getElementById('loader').innerHTML = "A few more minutes and recommendations will pop up.";}, 3000);
		//startTime = Date.now();
	}
	startTime = Date.now(); */
  }
  
  function stopLoaderAnimation() {
	  //showHideRow('loaderRow');
	  document.getElementById('loader').className = "loaderStop";
	  document.getElementById('loaderRow').style.display="none";
  }  
  
  function hasWhiteSpace(s) {
	  return s.indexOf(' ') >= 0;
	}
  
  function validateUser(userid) {
	  var validated = true;
	  if(userid.trim()=== ""){
		  fire("Please enter a user id. Only digits allowed.");
		  validated = false;
	  }
	  if( hasWhiteSpace(userid.trim()) ){
		  fire("User ID must be integers without blank spaces.");
		  validated = false;
	  }  
	  
	  if(!isNumber(userid.trim()) ){
		  fire("Only digits are allowed for the User ID.");
		  validated = false;
	  } 	

	  return validated;
  }  
  
  
  function isNumber(input){
      return (input - 0) == input &amp;&amp; (''+input).trim().length &gt; 0;
  }  
  
  
  
 function showinfoboxFromEvaluation(uri,seed) {
	 	 
	      showHide('mynetworkClear');
	 	 
	 	 if(uri!=null &amp;&amp; uri.length > 0){
	   	  current_id = uri;
	   	 }else if(current_id!=null &amp;&amp; current_id.length > 0){
	   	  uri = current_id;
	   	 }
	   	 hasWhy = false;

	   	 //to enable evaluation to be shown
	   	 nodeWasClicked = false;
	   	 underEvaluation = true;
	   	 current_seed = seed;
	   	 var host = document.getElementById('host').value;
	   	 var tss = document.getElementById('tss').value;
	   	 loadJSONNotParse(host+"/LODWEB/rest/infobox/"+uri+"/"+tss,setHTML,function(err) {console.log('error')});
  }
 
 
  
  function showInfobox(uri) {
	  showHide('mynetworkClear');
	  
	  underEvaluation = document.getElementById('underEvaluation').checked;
	  
	  // initiating infobox from command button
	  if (!nodeWasClicked) {
		  if (uri !== "undefined") {
			  uri = capitalizeFirstLetter(document.getElementById('uri').value).trim();
		  }
		  
		  if(!validateQuery(uri)){
			  return false;
		  };
		  
		  if( hasWhiteSpace(uri) ){
			  fire("You query cannot have blank spaces.");
			  return false;
		  }
	  }

	  try {
    	  if(uri!=null &amp;&amp; uri.length > 0){
    		  current_id = uri;
    	  }else if(current_id!=null &amp;&amp; current_id.length > 0){
    		  uri = current_id;
    	  }
    	  hasWhy = false;
    	  var host = document.getElementById('host').value;
    	  var tss = document.getElementById('tss').value;
    	  loadJSONNotParse(host+"/LODWEB/rest/infobox/"+uri+"/"+tss,setHTML,function(err) {console.log('error')});
      }
	  
	  
	  
      catch (err) {
          alert('aaa');
    	  alert(err);
      }
  }
  
  function showInstructions() {
	  
	  try {
	  
		  document.getElementById('myModalIntruction').style.display = "block";
		  
/* 	      var modalBox = document.getElementById('modalBoxInstruction');
	      
	      modalBox.innerHTML = "fred";
	      
	      var modalTitle = document.getElementById('modalTitleInstruction');
	      
	      modalTitle.innerHTML = "Title"; */

	  } catch (err) {

      }
  }  
  
  function setHTML(content) {
	  
	  try {
	  
		  document.getElementById('myModal').style.display = "block";
		  
	      var modalBox = document.getElementById('modalBox');
	      
	      modalBox.innerHTML = content;
	      
	      var modalTitle = document.getElementById('modalTitle');
	      
	      var link = 'http://dbpedia.org/resource/'+current_id;
	      
	      //console.log(current_id);
	      //console.log(userProfileIds);
	      
		var imgRec = "";

	      if (!evaluationMode) {
	    	  
	    	  imgRec =  '<img onclick='recommend();' src='../dist/img/play.png' alt='Recommend !'  width='30' height='30' align='center'  />';  
	      
		      if (isInArray(userProfileIds,current_id)) {
		    	  var img = '<img id='current_id' onclick='removeprofileFromModal(current_id);' src='../dist/img/like.png'   alt='Remove Like'  width='50' height='50' align='center' />';
		      }else{
		    	  var img = '<img id='current_id' onclick='addprofile();' src='../dist/img/neutral.png' alt='Like it !'  width='50' height='50' align='center'  />'; 
		      }
		      var imgFinal =  img.replace('current_id',current_id);
	      
	       } else{
	    	  var imgFinal = "";
	      } 
	      
	      
	      var finalUrl = '<h2><div onclick='openInNewTab()' style='display:inline;cursor:pointer;color:#0000FF'>'+link+'</div>&nbsp;'+imgFinal + imgRec;
	
	      if (!evaluationMode) {
		      if(nodes.get(current_id)!=null){
		    	  var explanation = JSON.stringify(nodes.get(current_id).attributes.why,null,4);
		          if (!isInArray(userProfileIds,current_id) &amp;&amp; nodes.get(current_id)!=null &amp;&amp; explanation.length>10) {
		        	  finalUrl =  finalUrl + '<img onclick='insertWhy(current_id);' src='../dist/img/why.png' style='display:inline;cursor:pointer;color:#0000FF'  alt='Explanation'  width='30' height='30' align='center'/>';
		          }
		      }
	      }
	      
	      finalUrl =  finalUrl + '</h2>';
	      
	      modalTitle.innerHTML = finalUrl;

	      if(evaluationMode  &amp;&amp; current_id!=current_seed){

	    	  document.getElementById('modalEvaluation').style.display = "block";
		      document.getElementById('footText').innerText = "EVALUATION";
		      document.getElementById('modal-footer').style.backgroundColor = "#b1b1dd";
		      
		      if(nodeWasClicked){
			      var nodeChildIds = [];
		   		  if (!isEmpty(network.getConnectedNodes(current_id))) {
		   			  nodeChildIds = network.getConnectedNodes(current_id);
				  }
		   		  if(nodeChildIds.length>1){
		   			  alert("There is more than one seed for the same recommendation.");
		   		  }else{
		   			  // Load evaluation from database to set in the screem.
				      current_seed = nodeChildIds[0];
		   			  getEvaluation();  
		   		  }
		      } else {
		    	  getEvaluation();  
		      }

	      } else {
	    	  document.getElementById('modalEvaluation').style.display = "none";
	    	  document.getElementById('modal-footer').style.backgroundColor = "#A5C8FD";
	    	  document.getElementById('footText').innerText = "LODICA 2017";
	      }

 	      // This flag is very important to hide the modal evaluation	  
    	  nodeWasClicked = false;

      
	  } catch (err) {
          fire(err);
      }
  } 
  
  function insertWhy(uri) {
	    var table = document.getElementById("infoboxTable");
	    //alert(table);
/* 	    alert(!hasWhy);
	    alert(!isInArray(userProfileIds,uri)); */ 

	    if (!hasWhy &amp;&amp; !isInArray(userProfileIds,uri)){
		    var row = table.insertRow(0);
		    var cell1 = row.insertCell(0);
		    var cell2 = row.insertCell(1);
		    cell1.style.backgroundColor='#ebf433';
		    cell1.innerHTML = "Explanation:";
		    cell2.style.backgroundColor='#ebf433';
		    cell2.innerHTML = nodes.get(uri).attributes.why;
		    hasWhy = true;
	    }else {
	    	table.deleteRow(0);
	    	hasWhy = false; 
	    }
	}  
  
  function updateImage(imgId,image) {
	  //document.getElementById('myModal').style.display = "none";
	  document.getElementById('myModal').style.display = "block";
      var modalBox = document.getElementById('modalBox');
      modalBox.innerHTML = document.getElementById('modalBox').innerHTML;	  
      var modalTitle = document.getElementById('modalTitle');
      var link = 'http://dbpedia.org/resource/'+current_id;
      
      var imgRec = "";  
      
      if (!evaluationMode) {
    	  
    	  imgRec = '<img onclick='recommend();' src='../dist/img/play.png' alt='Recommend !'  width='30' height='30' align='center' />';
    	  
	      if (image=="like") {
	    	  var img = '<img id='current_id' onclick='removeprofileFromModal(current_id);' src='../dist/img/like.png' alt='Remove Like'  width='50' height='50' align='center' />';
	      }else if (image=="neutral"){
	    	  var img = '<img id='current_id' onclick='addprofile();' src='../dist/img/neutral.png' alt='Like it !'  width='50' height='50' align='center'  />'; 
	      }
	      var imgFinal =  img.replace('current_id',current_id);
      }else {
    	  var imgFinal = "";  
      }
           
      
      var finalUrl = '<h2><div onclick='openInNewTab()' style='display:inline;cursor:pointer;color:#0000FF'>'+link+'</div>&nbsp;'+imgFinal + imgRec;

      if (!evaluationMode) {
	      if(nodes.get(current_id)!=null){
	    	  var explanation = JSON.stringify(nodes.get(current_id).attributes.why,null,1);
	          if (isInArray(userProfileIds,current_id) &amp;&amp; nodes.get(current_id)!=null &amp;&amp; explanation.length>10) {
	        	  finalUrl =  finalUrl + '<img onclick='insertWhy(current_id);' src='../dist/img/why.png' style='display:inline;cursor:pointer;color:#0000FF'  alt='Explanation'  width='30' height='30' align='center' />';
	          }
	      } 
      }

      finalUrl =  finalUrl + '</h2>';
      
      if (hasWhy &amp;&amp; image=="like") {
      	insertWhy(current_id);
      }
      
      modalTitle.innerHTML = finalUrl;
  }   
 
  function openInNewTab() {

	  document.getElementById('uri').value = current_id;
	  var link = 'http://dbpedia.org/resource/'+current_id;
	  var win = window.open(link, '_blank');
	  win.focus();
	}
  
  function setUri(uriP) {
	  //alert(uriP);
	  document.getElementById('uri').value = uriP; 
 }
  
  function err(msg) {
	if(msg!=null){
		nodeContent.innerHTML = msg;  
	}else{
		nodeContent.innerHTML = "Something went wrong";
	}
  
	  
  }

  function resetAll() {
	  nodes.clear();
      edges.clear();
  }

  function showMessage(message) {
	  if(typeof current_id !== "undefined"){
		   document.getElementById('message').style.display="block";
		   document.getElementById('message').innerHTML=message;
	  }
  }
  
  function hideMessage() {
     document.getElementById('message').style.display="none";
  }  
  
  /**
   * This function fills the DataSets. These DataSets will update the network.
   */
  function redrawAll(gephiJSON) {
	  
    stopLoaderAnimation();
	  
	removeNode(current_id);
	  
    if (gephiJSON.nodes === undefined) {
      gephiJSON = gephiImported;
    }else {
      gephiImported = gephiJSON;
    }

    var parserOptions = {"edges": {"smooth": {"forceDirection": "none"},"inheritColors":true},"nodes":{"parseColor":true},"physics":{"enabled": true}}
    
/*     var parserOptions = {
    		 physics: false,
   		physics: {
   		    barnesHut: {
   		      centralGravity: 0,
   		      springLength: 500,
   		      springConstant: 0.685
   		    }
   		  },    		
	   edges: {
	     inheritColors: true,
	     length: 100
	   },
	   nodes: {
	     fixed: true,
	     parseColor: true
	   }
  } 
	 console.log(parserOptions); */

    var parsed = vis.network.gephiParser.parseGephi(gephiJSON, parserOptions);
	 
	 if(parsed!=null){
		 nodeSeedsId.push(current_id);
	 }
	 
/* 	 var edgesDataset = new vis.DataSet(parsed.edges);
	 console.log(edgesDataset.get({returnType:'Object'})); */

	 nodes.update(parsed.nodes);
     edges.update(parsed.edges);

     var networkNodes2 = [];
    

     
     edges.forEach(function(elem, index, array) {
		  var contem = containsEdge(networkNodes2,elem);
		  if(contem){
			  edges.remove(elem);
		  }
  	  networkNodes2.push({from:elem.from,to:elem.to});
    });
     
     var nodesDataset = new vis.DataSet(parsed.nodes);

	 var max = document.getElementById('maxhybrid').value;
	 
	 //evaluationSize
	 if(nodesDataset.length>=max &amp;&amp; document.getElementById('missing')==null){
		 showMessage("The top "+(max)+" recommendation(s) are shown below.");
		 setInterval(hideMessage,3000);
	 }else if(nodesDataset.length>=max &amp;&amp; document.getElementById('missing')!=null){
		 showMessage("The top "+(max-1)+" recommendation(s) are shown below.");
		 setInterval(hideMessage,3000);
	 }else if(nodesDataset.length &lt;max){
		 showMessage("The top "+(nodesDataset.length-1)+" recommendation(s) are shown below.");
		 setInterval(hideMessage,3000);
	 }else{
		 showMessage("The top recommendations are shown below.");
		 setInterval(hideMessage,3000);
	 }
	 uri = current_id;


	if(evaluationMode){
		fillEvaluationIds();
	}
	
	 //alert(evaluationIds);
	
	 colorNodes();
	 
	 network.fit(); // zoom to fit
	 

  }
  
  
  function fillEvaluationIds(){
		 var here2 = document.getElementsByClassName("recommendationEvaluatedClass");
		  var inputListEvaluation = Array.prototype.slice.call(here2);
		  for(i = 0;i &lt; inputListEvaluation.length; i++){
			  if(inputListEvaluation[i].id.length != 0 &amp;&amp; !isInArray(evaluationIds,inputListEvaluation[i].id)){
				  evaluationIds.push(inputListEvaluation[i].id);  
		      }
		  }
  }
  
  /**
   * This function fills the DataSets. These DataSets will update the network.
   */
  function freeze(button) {
	       switch(button.value){
	            case "Freeze":
	            	 var options = {"physics": {"enabled": false,"barnesHut": {"gravitationalConstant": -36000},"minVelocity": 0.75}}	     	       
	                 button.value = "Unfreeze";
	            	 button.innerHTML = "Unfreeze Nodes";
	            	 button.style.background='#919191';
	                 break;
	            case "Unfreeze":
	            	 var options = {"edges": {"smooth": {"forceDirection": "none"},"inheritColors":true},"nodes":{"parseColor":true},"physics":{"enabled": true}}
	                 button.value = "Freeze";
	            	 button.innerHTML = "Freeze Nodes";
	            	 button.style = 'myButton';
	                 break;
	       }
	  	  
	network.setOptions(options);
	network.fit(); // zoom to fit
  } 

	function colorNodes(){


	    nodes.forEach(function(elem, index, array) {
 	    	 // tu purple 
 	    	 /* alert(showTU);
 	    	alert(elem.id);
 	    	alert(arrayContains(elem.id,userProfileIds)); */
			  if(elem.id != current_seed &amp;&amp; showTU &amp;&amp; isInArray(userProfileIds,elem.id)){
				    //alert("tu purple ");
				    nodes.update({
				    	id: elem.id,
				    	//color: '#9999FF'
				    	color: {background:'#9999FF', border:'black',highlight:{background:'#9999FF',border:'black'}}
				    	});
				    
			  }else if(elem.id == current_seed &amp;&amp; !isInArray(userProfileIds,elem.id)){  // seed
			      //}else if(elem.id == current_seed &amp;&amp; isInArray(userProfileIds,elem.id) ){  // seed
					  //alert("seed green");
					    nodes.update({
					    	id: elem.id,
					    	 //color:'#CCFFCC',
					    	 color: {background:'#CCFFCC', border:'#CCF2FF',highlight:{background:'#CCFFCC',border:'#CCF2FF'}}
					    		/* color.border: '#9999FF',
						    	color.highlight.border: '#9999FF' */
					    	
					    	//color: '#9999FF'
					    	});				    
				    
			  }else if(elem.id == current_seed &amp;&amp; isInArray(userProfileIds,elem.id) ){  // seed
		      //}else if(elem.id == current_seed &amp;&amp; isInArray(userProfileIds,elem.id) ){  // seed
				  //alert("seed green");
				    nodes.update({
				    	id: elem.id,
				    	 color: {background:'#CCFFCC', border:'#9999FF',highlight:{background:'#CCFFCC',border:'#9999FF'}}
				    		/* color.border: '#9999FF',
					    	color.highlight.border: '#9999FF' */
				    	
				    	//color: '#9999FF'
				    	});

		      //}else if(evaluationMode &amp;&amp; ((isInArray(evaluationIds,elem.id) &amp;&amp; checkLinkBetweenNodes(current_seed,elem.id)))   &amp;&amp; (elem.id != current_seed) ){  // seed
		    }else if(evaluationMode &amp;&amp; isInArray(evaluationIds,elem.id)  &amp;&amp; (elem.id != current_seed) ){  // seed
			      
		    	  // }else if(elem.id == current_seed &amp;&amp; isInArray(userProfileIds,elem.id) ){  // seed
					  //alert("seed orange");
					    nodes.update({
					    	id: elem.id,
					    	 color: {background:'#ffd8b7', border:'#CCF2FF',highlight:{background:'#ffd8b7',border:'#CCF2FF'}}
					    		/* color.border: '#9999FF',
						    	color.highlight.border: '#9999FF' */
					    	
					    	//color: '#9999FF'
					    	});				    
				}else{
	
				  //alert("recommendations blue");
				    nodes.update({  // recommendations blue
				    	id: elem.id,
				    	color: '#CCF2FF'
				    	});
			  }
		  });	  
	  

  }	
  
  function getEdgesOfNode(nodeId) {
   	  return edges.get().filter(function (edge) {
   	    return edge.from === nodeId || edge.to === nodeId;
   	  });
   	}
  
  function checkLink(nodeFrom,nodeTo) {
	  
   	  return edges.get().filter(function (edge) {
   	    if ((edge.from === nodeFrom  &amp;&amp; edge.to === nodeTo) ||  (edge.from === nodeTo  &amp;&amp; edge.to ===  nodeFrom)){
   	    	return true;
   	    }else{
   	    	return false;
   	    }
   	  });
   	}  
  
  function containsEdge(arraydata,elem) {
	  var found = false;
	  for(var i = 0; i &lt; arraydata.length; i++) {
	      if ( (arraydata[i].from === elem.from &amp;&amp; arraydata[i].to === elem.to) ||  (arraydata[i].from === elem.to &amp;&amp; arraydata[i].to === elem.from) ) {		    	  
	          found = true;
	          break;
	      }		
	  }
	  return found;
  }	
  		  
  function arrayContains(needle, arrhaystack){
	  if(!arrhaystack[0]){
       return (arrhaystack.indexOf(needle) > -1);
	  }
  }	
  
  function loadJSONNotParse(path, success, error) {
	  var xhr = new XMLHttpRequest();
	  xhr.onreadystatechange = function () {
	    if (xhr.readyState === 4) {
	      if (xhr.status === 200) {
	        success(xhr.responseText);
	      }
	      else {
	        error(xhr);
	      }
	    }
	  };
	  xhr.open('GET', path, true);
	  xhr.send();
	}
  
  function isValidURL2(url) {

	  	url=url.value+"/LODWEB/faces/index.xhtml";
	    //var encodedURL = encodeURIComponent(url);
	    $.ajax({
                url: url,
                type: "get",
                async: false,                
                success: function(result){
                    alert('reply');
                    alert(url);
                    //return true;
                },     
                error: function(test){
                	alert(url);
                    fire('This server is offline :( ');
                    //return false;
                }
            }
        );
	}
  
  
  function isValidURL(url) {
	  url=url.value+"/LODWEB/rest/verify";
	  var xhr = new XMLHttpRequest();
	  xhr.onreadystatechange = function () {
	    if (xhr.readyState === 4) {
	      if (xhr.status === 200) {
	        //alert(xhr.responseText);
	        //alert('reply');
	    	  
	      }
	      else {
	        //alert(xhr);
	        fire('This server is offline :( ');
	        
	      }
	    }
	  };
	  xhr.open('GET', url, true);
	  xhr.send();
	}
  
  function isValidTSS(tss) {
	   if (tss.value==='DBPEDIA') {
		   url='http://dbpedia.org/snorql/';
	   }else if (tss.value ==='FUSEKI') {
		   var url = document.getElementById('host').value;
		   var s = url.substring(0, url.lastIndexOf(':'));
		   url=s+":3030";   
	   }
	    //var encodedURL = encodeURIComponent(url);
	    $.ajax({
              url: url,
              success: function(result){
                  //alert('reply');
                  return true;
              },     
              error: function(result){
                  fire('This triple store server is offline :( ');
                  return false;
              }
          }
      );
	}  
  
  function outputUpdate(vol) {
		document.querySelector('#volume').value = vol;
		//recommend();
 } 
  
  function removeSpecials(str) {
	    var lower = str.toLowerCase();
	    var upper = str.toUpperCase();

	    var res = "";
	    for(var i=0; i&lt;lower.length; ++i) {
	        if(lower[i] != upper[i] || lower[i].trim() === '')
	            res += str[i];
	    }
	    return res;
	}  
  
  function suggestQuery(str) {

	  var separated = str.trim().split(/[^A-Za-z0-9]/);
	    var query = " select distinct ?q where {{ ?q rdfs:label ?txt . ?txt bif:contains ";
	    if(separated.length&lt;2){
	    	query = query.replace("{{","{");
	    }

	    $.each(separated, function(index, chunk) {
	    	if(chunk!=""){
		    	if (str.startsWith(chunk) &amp;&amp; chunk.length>=4) {
		    		query += "\"'"+ chunk + "*'\"";
		    	}else if (str.startsWith(chunk) &amp;&amp; chunk.length&lt;4) {
			    	query += "\"'"+ chunk + "'\"";		    		
				}else if (!str.startsWith(chunk)){
					query += ". FILTER(CONTAINS(?txt,\""+chunk+"\"))";
				}
	    	}
	    });
	    query +=  ". FILTER(!STRSTARTS(STR(?q),\"http://dbpedia.org/resource/Category\")) . FILTER(STRSTARTS(STR(?q),\"http://dbpedia.org/resource/\"))}";

	    if(separated.length>=2){
		    $.each(separated, function(index, chunk2) {
		    	query += " UNION { ?q rdfs:label ?txt . ?txt bif:contains \"'"+ chunk2 + "'\" . FILTER(!STRSTARTS(STR(?q),\"http://dbpedia.org/resource/Category\")) . FILTER(STRSTARTS(STR(?q),\"http://dbpedia.org/resource/\"))}";	
		    });
		    query +=  "} LIMIT 100";
	    }else{
	    	query +=  " LIMIT 100";
	    }
	    
	    
	   // alert(query);
	    
		 var url = "http://dbpedia.org/sparql";
		 
		 var queryUrl = url+"?query="+ encodeURIComponent(query) +"&amp;format=json";
		 
		 $.ajax({
			      dataType: "jsonp",  
			      url: queryUrl,
			      success: function( json ) {
			       if (json['results']['bindings'].length==0){
			    	   return false;
			       }

			       var options = '<option title="Some sugestions:">Some sugestions for \"'+str+'\"</option>';
				   
				   if ($('#thelist option:first-child').attr("title") == "Query Samples:") {
			    	   $('#thelist').empty();
	  			   } 
				   
				   if ($('#thelist option:first-child').attr("title") != "Some Suggestions for "+str) {
			    	   $('#thelist').empty();
	  			   } 			   
				   
				   $.each(json['results']['bindings'], function(i, optionHtml) {
			        	var o = removeNamesplace(optionHtml['q']['value']);
			            options += '<option value="' + o + '">' + o + '</option>';
			           });
			        $('#thelist').prepend(options);
			        
			        //stopLoaderAnimation();
			        
	   	            return true;
			      },
			      error: function(result){
			    	  fire('Sparql endpoint server seems to be offline.');
			    	  //stopLoaderAnimation();
			      }
			  });
	  }  


  
  //Check if an item is a web resource
  function checkResource() {
	  
	  if(evaluationMode){
		  
		  return false;
	  }

	  var uriOK = false;
	  
	  var queryFixed = false;
      
	  var str = document.getElementById('uri').value.trim();
	  
	  if(!validateQuery(str)){
		  return false;
	  }
	  
	  //$('#thelist').reset();
	  
	  /* var exist = existDBPediaResource();
	  alert("exist "+exist);
	  if(exist){
		  return true;
	  } */
	   
	  var separated = str.trim().split(/[^A-Za-z0-9()_]/);

	  var newUri = '';
	   
	   $.each(separated, function(index, chunk) {
		   if (chunk.length>=0) {
		    	if (!str.endsWith(chunk)){
		    		newUri += capitalizeFirstLetter(chunk) + '_';
				}else{
					newUri += capitalizeFirstLetter(chunk);
				}
		   }
	    });
	  
 	  newUri = newUri.replace(/_$/,'');
	   
	  if(str != newUri){
		  queryFixed = true;
	  }

	  
	  //alert(newUri);
	  
	  var sparqlquery = "select count(*)&gt;=1 as ?s WHERE { &lt;http://dbpedia.org/resource/"+newUri+"&gt; rdfs:label ?l}";
	  
	  var url = "http://dbpedia.org/sparql";
	  
	  var queryUrl = url+"?query="+ encodeURIComponent(sparqlquery) +"&amp;format=json";
	  

	  $.ajax({
	      dataType: "jsonp",  
	      url: queryUrl,
	      success: function( json ) {
	    	$.each(json['results']['bindings'], function(i, result) {
	    		  if (result['s']['value']==1){
	            	  document.getElementById('uri').value = capitalizeFirstLetter(newUri);
	            	  uriOK = true;	
	            	  if(queryFixed){
	            		  buildSelectSuggestions();
	            		  fire("We fixed you query ! If you agree, click on the <b>Recommend</b> button again.");	            		  
	            	  }
	              }else{
	            	  uriOK = false;
	            	  //document.getElementById('uri').value = capitalizeFirstLetter(newUri);
	            	  fire("Your query is not a Linked Data Resource. Looking for proper query suggestions.... !");
	            	  var suggestionsCreated = suggestQuery(newUri);
	             	 // if(!suggestionsCreated){
		            	 // stopLoaderAnimation();
	            		  //fire("Sorry, no suggestions found. Please refine your query. !");
	            	  //} 
	              }              
	           });
	      },
	      error: function(result){
	    	  fire('Sorry, something went wrong with the Sparql endpoint.');
	      }
	  });
	} 
  
  function combo(thelist, uri){
	  uri = document.getElementById(uri);  
	  var idx = thelist.selectedIndex;
	  if(idx!=0){
		  var content = thelist.options[idx].innerHTML;
		  uri.value = content;
		}
	}
  
  function fire(msg){
      $("#error-message").show();
      $('#error-message').addClass('warningMessage').html(msg);
      $("#error-message").fadeOut(8000);
  }
  
  function fire(msg,time){
      $("#error-message").show();
      $('#error-message').addClass('warningMessage').html(msg);
      $("#error-message").fadeOut(time);
  }
  
  function fireEvaluationMessage(msg){
	  document.getElementById('evaluationLogMessage').innerHTML = msg;
  }  
  
  function buildSelectSuggestions(){
	$('#thelist').empty();
	var options = '<option title="Query Samples:" selected="selected">Query Samples:</option>';
	options += '<option value="Finding_Nemo">Finding_Nemo</option>';
	options += '<option value="Finding_Nemo">Finding_Dory</option>';
	options += '<option value="Finding_Nemo">Cork_(city)</option>';
	options += '<option value="Queen_(band)">Queen_(band)</option>';
	$('#thelist').prepend(options);
  } 
  
  function displayError(err){
/*  	  alert(err.response);
	  console.log(err); 
	  alert("entoru displayError"); */
  
	  stopLoaderAnimation();
	  if(!isEmpty(err.response)){
		  fire(err.response);
	      showMessage(err.response);  
	  }
	  if(evaluationMode){
		  evaluationLog();
	  }
	  
  }  
  
  function isEmpty(str) {
	    return (!str || 0 === str.length);
	}
  
  function prepare(str) {
	  //str = document.getElementById('uri').value;
	  //alert(str);
	    var separated = str.trim().split(/[^A-Za-z0-9]/);
	    
	    var query = '^';
	    $.each(separated, function(index, chunk) {
	    	if (chunk.length>=4) {
	    		query += chunk + '*^';	
			}else if (!str.endsWith(chunk)){
				query += chunk + '%^';
			}else{
				query += chunk;
			}	    	
	    });
	    return query;
	}
  
  function capitalizeFirstLetter(string) {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	}
  
  

/*   function isValid(str){
	    alert('asdddddddddddddd');
	  var regex = "'~`!#$%^&amp;*+=-[]\\\';,/{}|\":&lt;>?'";
		return regex.test(str);
	}  */

  
	
	function fixedEncodeURIComponent(str) {
		  return encodeURIComponent(str).replace(/[!()*]/g, function(c) {
		    return '%' + c.charCodeAt(0).toString(16);
		  });
		}	

  function updateUrlPath(updateUri) {
    var imageUri = updateUri.replace("submitid_","");
	var imageurlpath = document.getElementById('imageurl_'+imageUri).value;
	
  	
	if (imageurlpath == "") {
  		alert("Url path must be inserted");
  		return;
  	}
	
  	if ((imageurlpath.match("^http:")!=null) &amp;&amp; (imageurlpath.match("^https:")!=null)) {
  		alert("Url must start with HTTP(s).");
  		return;
  	} 
  	
  	if (imageurlpath.match("jpg$")==null) {
		alert("Please provide a link to an (.jpg or .png) image.");
		return;
  	}

  	var host = document.getElementById('host').value;  	

    $.ajax({
        url: host+'/LODWEB/rest/updateimageurlpath',
        type: "POST",
        data: { uri: imageUri,imageurlpath: imageurlpath },
        dataType: "json",
        success: function (result) {
            switch (result) {
                case true:
                	posupdateurlpath(result);
                    break;
                default:
                	posupdateurlpath(result);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
        alert(xhr.status);
        //alert('aaa6666666');
        alert(thrownError);
        }
    });    
}
  function posupdateurlpath(JSONObject){
	  //http://www.ogol.com.br/img/jogadores/98/102998_med_fred_carreiro.jpg
	  var uri = JSONObject.uri;
	  var message = JSONObject.message;
	  if (message == "sucess") {
/* 		  document.getElementById('messageid_'+uri).innerHTML = 'Url updated';
    	  document.getElementById('messageid_'+uri).style.display = "block";
    	  document.getElementById('messageid_'+uri).style.color = '#179b77';
    	  setTimeout(function(){ document.getElementById('messageInit').style.display = "none";}, 5000); */
    	  document.getElementById('imgid_'+uri).src = JSONObject.path;
	  }else if (message == "fail") {
    	  document.getElementById('messageid_'+uri).innerHTML = 'Ops something wrong!';
    	  document.getElementById('messageid_'+uri).style.display = "block";
    	  document.getElementById('messageid_'+uri).style.color = '#179b77';
    	  setTimeout(function(){ document.getElementById('messageInit').style.display = "none";}, 5000);		  
	  }
  } 


  function div_show(id) {
	var newId = id.replace("hrefid_","updateid_");
  	document.getElementById(newId).style.display = "block";
  }

  function div_hide(id){
	var newId = id.replace("dismissid_","updateid_");
  	document.getElementById(newId).style.display = "none";
  }
  

  $( function() {
	    $( document).tooltip();
   });
  
  var country_arr = new Array("Afghanistan", "Albania", "Algeria", "American Samoa", "Angola", "Anguilla", "Antartica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Ashmore and Cartier Island", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burma", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Clipperton Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czeck Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Europa Island", "Falkland Islands (Islas Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "Antarctic Lands", "Gabon", "Gambia, The", "Gaza Strip", "Georgia", "Germany", "Ghana", "Gibraltar", "Glorioso Islands", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City)", "Honduras", "Hong Kong", "Howland Island", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Ireland, Northern", "Israel", "Italy", "Jamaica", "Jan Mayen", "Japan", "Jarvis Island", "Jersey", "Johnston Atoll", "Jordan", "Juan de Nova Island", "Kazakhstan", "Kenya", "Kiribati", "Korea, North", "Korea, South", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Man, Isle of", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Midway Islands", "Moldova", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcaim Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romainia", "Russia", "Rwanda", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Scotland", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and South Sandwich Islands", "Spain", "Spratly Islands", "Sri Lanka", "Sudan", "Suriname", "Svalbard", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Tobago", "Toga", "Tokelau", "Tonga", "Trinidad", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "Uruguay", "USA", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands", "Wales", "Wallis and Futuna", "West Bank", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe");
  
  function populateCountries(countryElementId) {
	  
	    // given the id of the <select> tag as function argument, it inserts <option> tags
	    var countryElement = document.getElementById(countryElementId);
	    countryElement.length = 0;
	    countryElement.options[0] = new Option("Select Country", "-1");
	    countryElement.selectedIndex = 0;
	    for (var i = 0; i &lt; country_arr.length; i++) {
	        countryElement.options[countryElement.length] = new Option(country_arr[i], country_arr[i]);
	    } 
	   
	    //countryElement=countryElement+'</option></select>'
	 console.log(countryElement);
	}
  
  
</script>


</body>
</html>